namespace test_project::tpch {
  type IGgeneratedIGType9551_9565 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type int_stream = Stream (
    data: Bits(32),
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_char10_stream = Stream (
    data: Bits(80),
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type err_stream = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_char25_stream = Stream (
    data: Bits(200),
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType7814_7828 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType11077_11091 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_decimal_15_2 = Group(decimal: Bits(50));
  type overflow_type = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType8252_8266 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_char15_stream = Stream (
    data: Bits(120),
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_char1_stream = Stream (
    data: Bits(8),
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type stream_filter_select_stream_1bit = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType10601_10615 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type SQL_decimal_15_2_stream = Stream (
    data: SQL_decimal_15_2,
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType9825_9839 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType9260_9274 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type varchar_stream = Stream (
    data: Bits(8),
    throughput: 1,
    dimensionality: 2,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type IGgeneratedIGType23774_23788 = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type count_type = Stream (
    data: Bits(32),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type select_stream = Stream (
    data: Bits(1),
    throughput: 1,
    dimensionality: 0,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );
  type Date = Group(year: Bits(17),day: Bits(5),month: Bits(4));
  type date_stream = Stream (
    data: Date,
    throughput: 1,
    dimensionality: 1,
    synchronicity: Sync,
    complexity: 7,
    direction: Forward,
    user: Null,
    keep: false,
  );

  streamlet and_sATStreamIWerr_streamIMAT3 = (
    inputAT2: in err_stream,
    inputAT1: in err_stream,
    inputAT0: in err_stream,
    output: out err_stream,
  );
  streamlet is_equal_to_const_char10_sATAIR = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet const_char25_generator_sATDELIVERINPERSON = (
    output: out SQL_char25_stream,
  );
  streamlet const_char10_generator_sATband2 = (
    output: out SQL_char10_stream,
  );
  streamlet const_value_generator_sATStreamIWint_streamIMAT1 = (
    output: out int_stream,
  );
  streamlet comparator_is_equal_sATStreamIWSQL_char25_streamIM = (
    output: out IGgeneratedIGType9825_9839,
    input1: in SQL_char25_stream,
    input0: in SQL_char25_stream,
  );
  streamlet is_equal_to_const_char10_sATLGCASE = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet multiplier_sATStreamIWSQL_decimal_15_2_streamIM = (
    input0: in SQL_decimal_15_2_stream,
    input1: in SQL_decimal_15_2_stream,
    output: out SQL_decimal_15_2_stream,
    overflow: out IGgeneratedIGType8252_8266,
  );
  streamlet comparator_is_larger_equal_sATStreamIWint_streamIM = (
    output: out IGgeneratedIGType9260_9274,
    input1: in int_stream,
    input0: in int_stream,
  );
  streamlet is_equal_to_const_char10_sATLGPKG = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet const_char10_generator_sATSMCASE = (
    output: out SQL_char10_stream,
  );
  streamlet stream_filter_1bit_sATStreamIWSQL_decimal_15_2_streamIM = (
    input: in SQL_decimal_15_2_stream,
    select: in stream_filter_select_stream_1bit,
    output: out SQL_decimal_15_2_stream,
  );
  streamlet or_sATStreamIWselect_streamIMAT3 = (
    inputAT1: in select_stream,
    inputAT2: in select_stream,
    inputAT0: in select_stream,
    output: out select_stream,
  );
  streamlet duplicator_sATStreamIWSQL_char10_streamIMAT12 = (
    outputAT8: out SQL_char10_stream,
    outputAT6: out SQL_char10_stream,
    outputAT9: out SQL_char10_stream,
    outputAT11: out SQL_char10_stream,
    outputAT1: out SQL_char10_stream,
    outputAT2: out SQL_char10_stream,
    outputAT10: out SQL_char10_stream,
    outputAT3: out SQL_char10_stream,
    outputAT4: out SQL_char10_stream,
    input: in SQL_char10_stream,
    outputAT0: out SQL_char10_stream,
    outputAT5: out SQL_char10_stream,
    outputAT7: out SQL_char10_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT1 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet const_char10_generator_sATLGCASE = (
    output: out SQL_char10_stream,
  );
  streamlet comparator_is_larger_equal_sATStreamIWSQL_decimal_15_2_streamIM = (
    input1: in SQL_decimal_15_2_stream,
    output: out IGgeneratedIGType9260_9274,
    input0: in SQL_decimal_15_2_stream,
  );
  streamlet void_sATStreamIWdate_streamIM = (
    input: in date_stream,
  );
  streamlet is_equal_to_const_char10_sATMEDBOX = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet nation_s = (
    n_name: out SQL_char25_stream,
    n_nationkey: in int_stream,
    n_comment: out varchar_stream,
    n_regionkey: out int_stream,
  );
  streamlet is_equal_to_const_char10_sATAIRREG = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet const_char10_generator_sATband0 = (
    output: out SQL_char10_stream,
  );
  streamlet const_char10_generator_sATAIR = (
    output: out SQL_char10_stream,
  );
  streamlet void_sATStreamIWvarchar_streamIM = (
    input: in varchar_stream,
  );
  streamlet orders_s = (
    o_orderkey: in int_stream,
    o_orderdate: out date_stream,
    o_orderpriority: out SQL_char15_stream,
    o_shippriority: out int_stream,
    o_comment: out varchar_stream,
    o_custkey: out int_stream,
    o_totalprice: out SQL_decimal_15_2_stream,
    o_orderstatus: out SQL_char1_stream,
    o_clerk: out SQL_char15_stream,
  );
  streamlet is_equal_to_const_char10_sATLGBOX = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet const_char10_generator_sATSMBOX = (
    output: out SQL_char10_stream,
  );
  streamlet main_s = (
    l_linenumber: in int_stream,
    p_partkey: in int_stream,
    revenue: out SQL_decimal_15_2_stream,
    l_orderkey: in int_stream,
    err: out IGgeneratedIGType23774_23788,
  );
  streamlet is_equal_to_const_char10_sATSMPACK = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet const_value_generator_sATStreamIWint_streamIMAT5 = (
    output: out int_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT6 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet const_char10_generator_sATLGBOX = (
    output: out SQL_char10_stream,
  );
  streamlet is_equal_to_const_char10_sATLGPACK = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet accumulator_sATStreamIWSQL_decimal_15_2_streamIM = (
    input: in SQL_decimal_15_2_stream,
    overflow: out overflow_type,
    output: out SQL_decimal_15_2_stream,
    count: out count_type,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT5 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet void_sATStreamIWIGgeneratedIGType10601_10615IM = (
    input: in IGgeneratedIGType10601_10615,
  );
  streamlet comparator_is_smaller_equal_sATStreamIWint_streamIM = (
    input0: in int_stream,
    input1: in int_stream,
    output: out IGgeneratedIGType9551_9565,
  );
  streamlet const_char10_generator_sATSMPKG = (
    output: out SQL_char10_stream,
  );
  streamlet duplicator_sATStreamIWIGgeneratedIGType10601_10615IMAT2 = (
    input: in IGgeneratedIGType10601_10615,
    outputAT0: out IGgeneratedIGType10601_10615,
    outputAT1: out IGgeneratedIGType10601_10615,
  );
  streamlet void_sATStreamIWSQL_decimal_15_2_streamIM = (
    input: in SQL_decimal_15_2_stream,
  );
  streamlet void_sATStreamIWSQL_char1_streamIM = (
    input: in SQL_char1_stream,
  );
  streamlet is_equal_to_const_char10_sATMEDBAG = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet const_value_generator_sATStreamIWint_streamIMAT10 = (
    output: out int_stream,
  );
  streamlet void_sATStreamIWcount_typeIM = (
    input: in count_type,
  );
  streamlet partsupp_s = (
    ps_supplycost: out SQL_decimal_15_2_stream,
    ps_comment: out varchar_stream,
    ps_suppkey: in int_stream,
    ps_partkey: in int_stream,
    ps_availqty: out int_stream,
  );
  streamlet is_equal_to_const_char10_sATband1 = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet duplicator_sATStreamIWSQL_char10_streamIMAT3 = (
    outputAT1: out SQL_char10_stream,
    outputAT2: out SQL_char10_stream,
    input: in SQL_char10_stream,
    outputAT0: out SQL_char10_stream,
  );
  streamlet void_sATStreamIWint_streamIM = (
    input: in int_stream,
  );
  streamlet to_neg_sATStreamIWSQL_decimal_15_2_streamIM = (
    output: out SQL_decimal_15_2_stream,
    input: in SQL_decimal_15_2_stream,
  );
  streamlet is_equal_to_const_char10_sATSMCASE = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet lineitem_s = (
    l_shipinstruct: out SQL_char25_stream,
    l_partkey: out int_stream,
    l_receiptdate: out date_stream,
    l_extendedprice: out SQL_decimal_15_2_stream,
    l_suppkey: out int_stream,
    l_orderkey: in int_stream,
    l_shipdate: out date_stream,
    l_discount: out SQL_decimal_15_2_stream,
    l_quantity: out SQL_decimal_15_2_stream,
    l_shipmode: out SQL_char10_stream,
    l_linenumber: in int_stream,
    l_tax: out SQL_decimal_15_2_stream,
    l_returnflag: out SQL_char1_stream,
    l_linestatus: out SQL_char1_stream,
    l_commitdate: out date_stream,
    l_comment: out varchar_stream,
  );
  streamlet and_sATStreamIWselect_streamIMAT9 = (
    inputAT0: in select_stream,
    inputAT4: in select_stream,
    inputAT3: in select_stream,
    inputAT5: in select_stream,
    inputAT6: in select_stream,
    inputAT7: in select_stream,
    inputAT1: in select_stream,
    inputAT2: in select_stream,
    output: out select_stream,
    inputAT8: in select_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT15 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT4 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet duplicator_sATStreamIWSQL_char10_streamIMAT6 = (
    outputAT2: out SQL_char10_stream,
    outputAT5: out SQL_char10_stream,
    input: in SQL_char10_stream,
    outputAT1: out SQL_char10_stream,
    outputAT0: out SQL_char10_stream,
    outputAT4: out SQL_char10_stream,
    outputAT3: out SQL_char10_stream,
  );
  streamlet is_equal_to_const_char10_sATSMPKG = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet const_value_generator_sATStreamIWint_streamIMAT15 = (
    output: out int_stream,
  );
  streamlet const_char10_generator_sATAIRREG = (
    output: out SQL_char10_stream,
  );
  streamlet part_s = (
    p_size: out int_stream,
    p_container: out SQL_char10_stream,
    p_mfgr: out SQL_char25_stream,
    p_brand: out SQL_char10_stream,
    p_partkey: in int_stream,
    p_type: out varchar_stream,
    p_retailprice: out SQL_decimal_15_2_stream,
    p_comment: out varchar_stream,
    p_name: out varchar_stream,
  );
  streamlet const_char10_generator_sATMEDPACK = (
    output: out SQL_char10_stream,
  );
  streamlet duplicator_sATStreamIWint_streamIMAT6 = (
    input: in int_stream,
    outputAT1: out int_stream,
    outputAT2: out int_stream,
    outputAT3: out int_stream,
    outputAT5: out int_stream,
    outputAT4: out int_stream,
    outputAT0: out int_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT16 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet or_sATStreamIWselect_streamIMAT4 = (
    inputAT1: in select_stream,
    inputAT3: in select_stream,
    output: out select_stream,
    inputAT2: in select_stream,
    inputAT0: in select_stream,
  );
  streamlet or_sATStreamIWselect_streamIMAT2 = (
    inputAT1: in select_stream,
    output: out select_stream,
    inputAT0: in select_stream,
  );
  streamlet is_equal_to_const_char10_sATMEDPACK = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet duplicator_sATStreamIWSQL_decimal_15_2_streamIMAT6 = (
    outputAT3: out SQL_decimal_15_2_stream,
    outputAT5: out SQL_decimal_15_2_stream,
    outputAT1: out SQL_decimal_15_2_stream,
    outputAT2: out SQL_decimal_15_2_stream,
    outputAT0: out SQL_decimal_15_2_stream,
    input: in SQL_decimal_15_2_stream,
    outputAT4: out SQL_decimal_15_2_stream,
  );
  streamlet const_char10_generator_sATSMPACK = (
    output: out SQL_char10_stream,
  );
  streamlet is_equal_to_const_char10_sATband0 = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet const_char10_generator_sATband1 = (
    output: out SQL_char10_stream,
  );
  streamlet is_equal_to_const_char10_sATSMBOX = (
    output: out IGgeneratedIGType10601_10615,
    input: in SQL_char10_stream,
  );
  streamlet where_claus_s = (
    p_brand: in SQL_char10_stream,
    p_container: in SQL_char10_stream,
    l_shipmode: in SQL_char10_stream,
    p_partkey: in int_stream,
    select: out select_stream,
    l_partkey: in int_stream,
    l_shipinstruct: in SQL_char25_stream,
    p_size: in int_stream,
    l_quantity: in SQL_decimal_15_2_stream,
  );
  streamlet is_equal_to_const_char10_sATband2 = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet comparator_is_smaller_equal_sATStreamIWSQL_decimal_15_2_streamIM = (
    input0: in SQL_decimal_15_2_stream,
    output: out IGgeneratedIGType9551_9565,
    input1: in SQL_decimal_15_2_stream,
  );
  streamlet comparator_is_equal_sATStreamIWint_streamIM = (
    input1: in int_stream,
    input0: in int_stream,
    output: out IGgeneratedIGType9825_9839,
  );
  streamlet data_filter_s = (
    p_size: in int_stream,
    l_extendedprice_out: out SQL_decimal_15_2_stream,
    p_container: in SQL_char10_stream,
    l_shipinstruct: in SQL_char25_stream,
    p_partkey: in int_stream,
    l_quantity: in SQL_decimal_15_2_stream,
    l_extendedprice_in: in SQL_decimal_15_2_stream,
    l_partkey: in int_stream,
    l_discount_out: out SQL_decimal_15_2_stream,
    l_discount_in: in SQL_decimal_15_2_stream,
    p_brand: in SQL_char10_stream,
    l_shipmode: in SQL_char10_stream,
  );
  streamlet comparator_is_equal_sATStreamIWSQL_char10_streamIM = (
    output: out IGgeneratedIGType9825_9839,
    input0: in SQL_char10_stream,
    input1: in SQL_char10_stream,
  );
  streamlet region_s = (
    r_regionkey: in int_stream,
    r_comment: out varchar_stream,
    r_name: out SQL_char25_stream,
  );
  streamlet supplier_s = (
    s_acctbal: out SQL_decimal_15_2_stream,
    s_suppkey: in int_stream,
    s_address: out varchar_stream,
    s_name: out SQL_char25_stream,
    s_nationkey: out int_stream,
    s_phone: out SQL_char15_stream,
    s_comment: out varchar_stream,
  );
  streamlet const_char10_generator_sATMEDBOX = (
    output: out SQL_char10_stream,
  );
  streamlet duplicator_sATStreamIWIGgeneratedIGType9825_9839IMAT3 = (
    outputAT0: out IGgeneratedIGType9825_9839,
    input: in IGgeneratedIGType9825_9839,
    outputAT1: out IGgeneratedIGType9825_9839,
    outputAT2: out IGgeneratedIGType9825_9839,
  );
  streamlet duplicator_sATStreamIWint_streamIMAT2 = (
    outputAT1: out int_stream,
    input: in int_stream,
    outputAT0: out int_stream,
  );
  streamlet const_char10_generator_sATLGPACK = (
    output: out SQL_char10_stream,
  );
  streamlet is_equal_to_const_char25_sATDELIVERINPERSON = (
    output: out IGgeneratedIGType11077_11091,
    input: in SQL_char25_stream,
  );
  streamlet void_sATStreamIWSQL_char25_streamIM = (
    input: in SQL_char25_stream,
  );
  streamlet is_equal_to_const_char10_sATMEDPKG = (
    input: in SQL_char10_stream,
    output: out IGgeneratedIGType10601_10615,
  );
  streamlet adder_sATStreamIWSQL_decimal_15_2_streamIM = (
    output: out SQL_decimal_15_2_stream,
    overflow: out IGgeneratedIGType7814_7828,
    input0: in SQL_decimal_15_2_stream,
    input1: in SQL_decimal_15_2_stream,
  );
  streamlet duplicator_sATStreamIWselect_streamIMAT2 = (
    outputAT0: out select_stream,
    input: in select_stream,
    outputAT1: out select_stream,
  );
  streamlet duplicator_sATStreamIWIGgeneratedIGType11077_11091IMAT3 = (
    outputAT0: out IGgeneratedIGType11077_11091,
    input: in IGgeneratedIGType11077_11091,
    outputAT2: out IGgeneratedIGType11077_11091,
    outputAT1: out IGgeneratedIGType11077_11091,
  );
  streamlet customer_s = (
    c_comment: out varchar_stream,
    c_custkey: in int_stream,
    c_acctbal: out SQL_decimal_15_2_stream,
    c_address: out varchar_stream,
    c_phone: out SQL_char15_stream,
    c_name: out varchar_stream,
    c_mktsegment: out SQL_char10_stream,
    c_nationkey: out int_stream,
  );
  streamlet const_char10_generator_sATLGPKG = (
    output: out SQL_char10_stream,
  );
  streamlet const_char10_generator_sATMEDPKG = (
    output: out SQL_char10_stream,
  );
  streamlet const_value_generator_sATStreamIWSQL_decimal_15_2_streamIMAT14 = (
    output: out SQL_decimal_15_2_stream,
  );
  streamlet const_char10_generator_sATMEDBAG = (
    output: out SQL_char10_stream,
  );

  
  streamlet and_iATStreamIWselect_streamIMAT9 = (
        inputAT0: in select_stream,
        inputAT4: in select_stream,
        inputAT3: in select_stream,
        inputAT5: in select_stream,
        inputAT6: in select_stream,
        inputAT7: in select_stream,
        inputAT1: in select_stream,
        inputAT2: in select_stream,
        output: out select_stream,
        inputAT8: in select_stream,
  );

  
  streamlet or_iATStreamIWselect_streamIMAT2 = (
        inputAT1: in select_stream,
        output: out select_stream,
        inputAT0: in select_stream,
  );

  
  streamlet nation_i = (
        n_name: out SQL_char25_stream,
        n_nationkey: in int_stream,
        n_comment: out varchar_stream,
        n_regionkey: out int_stream,
  );

  
  streamlet to_neg_iATStreamIWSQL_decimal_15_2_streamIM = (
        output: out SQL_decimal_15_2_stream,
        input: in SQL_decimal_15_2_stream,
  );

  
  streamlet void_iATStreamIWSQL_char1_streamIM = (
        input: in SQL_char1_stream,
  );

  
  streamlet customer_i = (
        c_comment: out varchar_stream,
        c_custkey: in int_stream,
        c_acctbal: out SQL_decimal_15_2_stream,
        c_address: out varchar_stream,
        c_phone: out SQL_char15_stream,
        c_name: out varchar_stream,
        c_mktsegment: out SQL_char10_stream,
        c_nationkey: out int_stream,
  );

  
  streamlet duplicator_iATStreamIWint_streamIMAT6 = (
        input: in int_stream,
        outputAT1: out int_stream,
        outputAT2: out int_stream,
        outputAT3: out int_stream,
        outputAT5: out int_stream,
        outputAT4: out int_stream,
        outputAT0: out int_stream,
  );

  
  streamlet void_iATStreamIWvarchar_streamIM = (
        input: in varchar_stream,
  );

  
  streamlet const_char10_generator_iATLGCASE = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATLGBOX = (
        output: out SQL_char10_stream,
  );

  
  streamlet duplicator_iATStreamIWIGgeneratedIGType9825_9839IMAT3 = (
        outputAT0: out IGgeneratedIGType9825_9839,
        input: in IGgeneratedIGType9825_9839,
        outputAT1: out IGgeneratedIGType9825_9839,
        outputAT2: out IGgeneratedIGType9825_9839,
  );

  
  streamlet duplicator_iATStreamIWint_streamIMAT2 = (
        outputAT1: out int_stream,
        input: in int_stream,
        outputAT0: out int_stream,
  );

  
  streamlet multiplier_iATStreamIWSQL_decimal_15_2_streamIM = (
        input0: in SQL_decimal_15_2_stream,
        input1: in SQL_decimal_15_2_stream,
        output: out SQL_decimal_15_2_stream,
        overflow: out IGgeneratedIGType8252_8266,
  );

  
  streamlet accumulator_iATStreamIWSQL_decimal_15_2_streamIM = (
        input: in SQL_decimal_15_2_stream,
        overflow: out overflow_type,
        output: out SQL_decimal_15_2_stream,
        count: out count_type,
  );

  
  streamlet const_char10_generator_iATMEDBAG = (
        output: out SQL_char10_stream,
  );

  
  streamlet duplicator_iATStreamIWSQL_decimal_15_2_streamIMAT6 = (
        outputAT3: out SQL_decimal_15_2_stream,
        outputAT5: out SQL_decimal_15_2_stream,
        outputAT1: out SQL_decimal_15_2_stream,
        outputAT2: out SQL_decimal_15_2_stream,
        outputAT0: out SQL_decimal_15_2_stream,
        input: in SQL_decimal_15_2_stream,
        outputAT4: out SQL_decimal_15_2_stream,
  );

  
  streamlet const_value_generator_iATStreamIWint_streamIMAT15 = (
        output: out int_stream,
  );

  
  streamlet comparator_is_equal_iATStreamIWSQL_char25_streamIM = (
        output: out IGgeneratedIGType9825_9839,
        input1: in SQL_char25_stream,
        input0: in SQL_char25_stream,
  );

  
  streamlet duplicator_iATStreamIWselect_streamIMAT2 = (
        outputAT0: out select_stream,
        input: in select_stream,
        outputAT1: out select_stream,
  );

  
  streamlet comparator_is_smaller_equal_iATStreamIWSQL_decimal_15_2_streamIM = (
        input0: in SQL_decimal_15_2_stream,
        output: out IGgeneratedIGType9551_9565,
        input1: in SQL_decimal_15_2_stream,
  );

  
  streamlet const_char10_generator_iATSMPKG = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char25_generator_iATDELIVERINPERSON = (
        output: out SQL_char25_stream,
  );

  
  streamlet void_iATStreamIWdate_streamIM = (
        input: in date_stream,
  );

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT6 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet or_iATStreamIWselect_streamIMAT3 = (
        inputAT1: in select_stream,
        inputAT2: in select_stream,
        inputAT0: in select_stream,
        output: out select_stream,
  );

  
  streamlet const_char10_generator_iATLGPKG = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT15 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet void_iATStreamIWSQL_char25_streamIM = (
        input: in SQL_char25_stream,
  );

  
  streamlet duplicator_iATStreamIWIGgeneratedIGType11077_11091IMAT3 = (
        outputAT0: out IGgeneratedIGType11077_11091,
        input: in IGgeneratedIGType11077_11091,
        outputAT2: out IGgeneratedIGType11077_11091,
        outputAT1: out IGgeneratedIGType11077_11091,
  );

  
  streamlet comparator_is_larger_equal_iATStreamIWint_streamIM = (
        output: out IGgeneratedIGType9260_9274,
        input1: in int_stream,
        input0: in int_stream,
  );

  
  streamlet const_char10_generator_iATMEDBOX = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATAIR = (
        output: out SQL_char10_stream,
  );

  
  streamlet adder_iATStreamIWSQL_decimal_15_2_streamIM = (
        output: out SQL_decimal_15_2_stream,
        overflow: out IGgeneratedIGType7814_7828,
        input0: in SQL_decimal_15_2_stream,
        input1: in SQL_decimal_15_2_stream,
  );

  
  streamlet const_char10_generator_iATband0 = (
        output: out SQL_char10_stream,
  );

  
  streamlet comparator_is_equal_iATStreamIWSQL_char10_streamIM = (
        output: out IGgeneratedIGType9825_9839,
        input0: in SQL_char10_stream,
        input1: in SQL_char10_stream,
  );

  
  streamlet part_i = (
        p_size: out int_stream,
        p_container: out SQL_char10_stream,
        p_mfgr: out SQL_char25_stream,
        p_brand: out SQL_char10_stream,
        p_partkey: in int_stream,
        p_type: out varchar_stream,
        p_retailprice: out SQL_decimal_15_2_stream,
        p_comment: out varchar_stream,
        p_name: out varchar_stream,
  );

  
  streamlet orders_i = (
        o_orderkey: in int_stream,
        o_orderdate: out date_stream,
        o_orderpriority: out SQL_char15_stream,
        o_shippriority: out int_stream,
        o_comment: out varchar_stream,
        o_custkey: out int_stream,
        o_totalprice: out SQL_decimal_15_2_stream,
        o_orderstatus: out SQL_char1_stream,
        o_clerk: out SQL_char15_stream,
  );

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT16 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet is_equal_to_const_char10_iATLGBOX = is_equal_to_const_char10_sATLGBOX {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATLGBOX;
      compare.output -- output;
      const_gen.output -- compare.input0;
      input -- compare.input1;
    },
  };

  
  streamlet const_char10_generator_iATband2 = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATAIRREG = (
        output: out SQL_char10_stream,
  );

  
  streamlet is_equal_to_const_char25_iATDELIVERINPERSON = is_equal_to_const_char25_sATDELIVERINPERSON {
    impl:
    {
      const_gen = const_char25_generator_iATDELIVERINPERSON;
      compare = comparator_is_equal_iATStreamIWSQL_char25_streamIM;
      input -- compare.input1;
      const_gen.output -- compare.input0;
      compare.output -- output;
    },
  };

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT14 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet duplicator_iATStreamIWSQL_char10_streamIMAT12 = (
        outputAT8: out SQL_char10_stream,
        outputAT6: out SQL_char10_stream,
        outputAT9: out SQL_char10_stream,
        outputAT11: out SQL_char10_stream,
        outputAT1: out SQL_char10_stream,
        outputAT2: out SQL_char10_stream,
        outputAT10: out SQL_char10_stream,
        outputAT3: out SQL_char10_stream,
        outputAT4: out SQL_char10_stream,
        input: in SQL_char10_stream,
        outputAT0: out SQL_char10_stream,
        outputAT5: out SQL_char10_stream,
        outputAT7: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATLGPACK = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATMEDPKG = (
        output: out SQL_char10_stream,
  );

  
  streamlet and_iATStreamIWerr_streamIMAT3 = (
        inputAT2: in err_stream,
        inputAT1: in err_stream,
        inputAT0: in err_stream,
        output: out err_stream,
  );

  
  streamlet supplier_i = (
        s_acctbal: out SQL_decimal_15_2_stream,
        s_suppkey: in int_stream,
        s_address: out varchar_stream,
        s_name: out SQL_char25_stream,
        s_nationkey: out int_stream,
        s_phone: out SQL_char15_stream,
        s_comment: out varchar_stream,
  );

  
  streamlet partsupp_i = (
        ps_supplycost: out SQL_decimal_15_2_stream,
        ps_comment: out varchar_stream,
        ps_suppkey: in int_stream,
        ps_partkey: in int_stream,
        ps_availqty: out int_stream,
  );

  
  streamlet comparator_is_equal_iATStreamIWint_streamIM = (
        input1: in int_stream,
        input0: in int_stream,
        output: out IGgeneratedIGType9825_9839,
  );

  
  streamlet const_char10_generator_iATSMCASE = (
        output: out SQL_char10_stream,
  );

  
  streamlet void_iATStreamIWSQL_decimal_15_2_streamIM = (
        input: in SQL_decimal_15_2_stream,
  );

  
  streamlet const_value_generator_iATStreamIWint_streamIMAT5 = (
        output: out int_stream,
  );

  
  streamlet void_iATStreamIWcount_typeIM = (
        input: in count_type,
  );

  
  streamlet comparator_is_smaller_equal_iATStreamIWint_streamIM = (
        input0: in int_stream,
        input1: in int_stream,
        output: out IGgeneratedIGType9551_9565,
  );

  
  streamlet const_char10_generator_iATMEDPACK = (
        output: out SQL_char10_stream,
  );

  
  streamlet duplicator_iATStreamIWSQL_char10_streamIMAT6 = (
        outputAT2: out SQL_char10_stream,
        outputAT5: out SQL_char10_stream,
        input: in SQL_char10_stream,
        outputAT1: out SQL_char10_stream,
        outputAT0: out SQL_char10_stream,
        outputAT4: out SQL_char10_stream,
        outputAT3: out SQL_char10_stream,
  );

  
  streamlet void_iATStreamIWIGgeneratedIGType10601_10615IM = (
        input: in IGgeneratedIGType10601_10615,
  );

  
  streamlet const_value_generator_iATStreamIWint_streamIMAT10 = (
        output: out int_stream,
  );

  
  streamlet is_equal_to_const_char10_iATband0 = is_equal_to_const_char10_sATband0 {
    impl:
    {
      const_gen = const_char10_generator_iATband0;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      compare.output -- output;
      const_gen.output -- compare.input0;
      input -- compare.input1;
    },
  };

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT5 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet const_char10_generator_iATSMBOX = (
        output: out SQL_char10_stream,
  );

  
  streamlet const_char10_generator_iATSMPACK = (
        output: out SQL_char10_stream,
  );

  
  streamlet lineitem_i = (
        l_shipinstruct: out SQL_char25_stream,
        l_partkey: out int_stream,
        l_receiptdate: out date_stream,
        l_extendedprice: out SQL_decimal_15_2_stream,
        l_suppkey: out int_stream,
        l_orderkey: in int_stream,
        l_shipdate: out date_stream,
        l_discount: out SQL_decimal_15_2_stream,
        l_quantity: out SQL_decimal_15_2_stream,
        l_shipmode: out SQL_char10_stream,
        l_linenumber: in int_stream,
        l_tax: out SQL_decimal_15_2_stream,
        l_returnflag: out SQL_char1_stream,
        l_linestatus: out SQL_char1_stream,
        l_commitdate: out date_stream,
        l_comment: out varchar_stream,
  );

  
  streamlet const_char10_generator_iATband1 = (
        output: out SQL_char10_stream,
  );

  
  streamlet or_iATStreamIWselect_streamIMAT4 = (
        inputAT1: in select_stream,
        inputAT3: in select_stream,
        output: out select_stream,
        inputAT2: in select_stream,
        inputAT0: in select_stream,
  );

  
  streamlet is_equal_to_const_char10_iATAIRREG = is_equal_to_const_char10_sATAIRREG {
    impl:
    {
      const_gen = const_char10_generator_iATAIRREG;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet duplicator_iATStreamIWIGgeneratedIGType10601_10615IMAT2 = (
        input: in IGgeneratedIGType10601_10615,
        outputAT0: out IGgeneratedIGType10601_10615,
        outputAT1: out IGgeneratedIGType10601_10615,
  );

  
  streamlet stream_filter_1bit_iATStreamIWSQL_decimal_15_2_streamIM = (
        input: in SQL_decimal_15_2_stream,
        select: in stream_filter_select_stream_1bit,
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet const_value_generator_iATStreamIWint_streamIMAT1 = (
        output: out int_stream,
  );

  
  streamlet comparator_is_larger_equal_iATStreamIWSQL_decimal_15_2_streamIM = (
        input1: in SQL_decimal_15_2_stream,
        output: out IGgeneratedIGType9260_9274,
        input0: in SQL_decimal_15_2_stream,
  );

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT1 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT4 = (
        output: out SQL_decimal_15_2_stream,
  );

  
  streamlet is_equal_to_const_char10_iATband2 = is_equal_to_const_char10_sATband2 {
    impl:
    {
      const_gen = const_char10_generator_iATband2;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      input -- compare.input1;
      compare.output -- output;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet duplicator_iATStreamIWSQL_char10_streamIMAT3 = (
        outputAT1: out SQL_char10_stream,
        outputAT2: out SQL_char10_stream,
        input: in SQL_char10_stream,
        outputAT0: out SQL_char10_stream,
  );

  
  streamlet void_iATStreamIWint_streamIM = (
        input: in int_stream,
  );

  
  streamlet region_i = (
        r_regionkey: in int_stream,
        r_comment: out varchar_stream,
        r_name: out SQL_char25_stream,
  );

  
  streamlet is_equal_to_const_char10_iATAIR = is_equal_to_const_char10_sATAIR {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATAIR;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATSMBOX = is_equal_to_const_char10_sATSMBOX {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATSMBOX;
      const_gen.output -- compare.input0;
      compare.output -- output;
      input -- compare.input1;
    },
  };

  
  streamlet is_equal_to_const_char10_iATLGPKG = is_equal_to_const_char10_sATLGPKG {
    impl:
    {
      const_gen = const_char10_generator_iATLGPKG;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen.output -- compare.input0;
      compare.output -- output;
      input -- compare.input1;
    },
  };

  
  streamlet is_equal_to_const_char10_iATMEDPACK = is_equal_to_const_char10_sATMEDPACK {
    impl:
    {
      const_gen = const_char10_generator_iATMEDPACK;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATSMCASE = is_equal_to_const_char10_sATSMCASE {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATSMCASE;
      compare.output -- output;
      const_gen.output -- compare.input0;
      input -- compare.input1;
    },
  };

  
  streamlet is_equal_to_const_char10_iATMEDPKG = is_equal_to_const_char10_sATMEDPKG {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATMEDPKG;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATLGCASE = is_equal_to_const_char10_sATLGCASE {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATLGCASE;
      input -- compare.input1;
      const_gen.output -- compare.input0;
      compare.output -- output;
    },
  };

  
  streamlet is_equal_to_const_char10_iATMEDBAG = is_equal_to_const_char10_sATMEDBAG {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATMEDBAG;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATSMPKG = is_equal_to_const_char10_sATSMPKG {
    impl:
    {
      const_gen = const_char10_generator_iATSMPKG;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen.output -- compare.input0;
      compare.output -- output;
      input -- compare.input1;
    },
  };

  
  streamlet is_equal_to_const_char10_iATLGPACK = is_equal_to_const_char10_sATLGPACK {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATLGPACK;
      input -- compare.input1;
      compare.output -- output;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATMEDBOX = is_equal_to_const_char10_sATMEDBOX {
    impl:
    {
      const_gen = const_char10_generator_iATMEDBOX;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      compare.output -- output;
      input -- compare.input1;
      const_gen.output -- compare.input0;
    },
  };

  
  streamlet is_equal_to_const_char10_iATband1 = is_equal_to_const_char10_sATband1 {
    impl:
    {
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen = const_char10_generator_iATband1;
      const_gen.output -- compare.input0;
      compare.output -- output;
      input -- compare.input1;
    },
  };

  
  streamlet is_equal_to_const_char10_iATSMPACK = is_equal_to_const_char10_sATSMPACK {
    impl:
    {
      const_gen = const_char10_generator_iATSMPACK;
      compare = comparator_is_equal_iATStreamIWSQL_char10_streamIM;
      const_gen.output -- compare.input0;
      compare.output -- output;
      input -- compare.input1;
    },
  };

  
  streamlet where_claus_i = where_claus_s {
    impl:
    {
      p_size_min_gen_2 = const_value_generator_iATStreamIWint_streamIMAT1;
      or_0 = or_iATStreamIWselect_streamIMAT3;
      l_quantity_max_compare_0 = comparator_is_smaller_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      container_or_0 = or_iATStreamIWselect_streamIMAT4;
      p_size_max_gen_2 = const_value_generator_iATStreamIWint_streamIMAT15;
      p_container_2_1 = is_equal_to_const_char10_iATLGBOX;
      container_or_1 = or_iATStreamIWselect_streamIMAT4;
      p_container_1_0 = is_equal_to_const_char10_iATMEDBAG;
      duplicate_p_container = duplicator_iATStreamIWSQL_char10_streamIMAT12;
      l_shipmode_comp_1_1 = is_equal_to_const_char10_iATAIRREG;
      and_0 = and_iATStreamIWselect_streamIMAT9;
      p_container_1_1 = is_equal_to_const_char10_iATMEDBOX;
      l_shipmode_comp_2_0 = is_equal_to_const_char10_iATAIR;
      l_shipmode_comp_2_1 = is_equal_to_const_char10_iATAIRREG;
      duplicate_p_size = duplicator_iATStreamIWint_streamIMAT6;
      p_brand_equal_2 = is_equal_to_const_char10_iATband2;
      l_shipmode_or_2 = or_iATStreamIWselect_streamIMAT2;
      l_quantity_max_compare_1 = comparator_is_smaller_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      p_size_min_compare_0 = comparator_is_larger_equal_iATStreamIWint_streamIM;
      l_shipmode_comp_1_0 = is_equal_to_const_char10_iATAIR;
      p_container_2_3 = is_equal_to_const_char10_iATLGPKG;
      p_size_max_compare_2 = comparator_is_smaller_equal_iATStreamIWint_streamIM;
      p_container_2_2 = is_equal_to_const_char10_iATLGPACK;
      p_size_min_gen_1 = const_value_generator_iATStreamIWint_streamIMAT1;
      duplicate_key_equal_0_output = duplicator_iATStreamIWIGgeneratedIGType9825_9839IMAT3;
      l_shipmode_comp_0_1 = is_equal_to_const_char10_iATAIRREG;
      void_p_brand_equal_2_output = void_iATStreamIWIGgeneratedIGType10601_10615IM;
      container_or_2 = or_iATStreamIWselect_streamIMAT4;
      l_quantity_min_compare_0 = comparator_is_larger_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      p_container_0_2 = is_equal_to_const_char10_iATSMPACK;
      p_size_max_gen_1 = const_value_generator_iATStreamIWint_streamIMAT10;
      l_quantity_max_gen_1 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT15;
      duplicate_l_shipinstruct_0_output = duplicator_iATStreamIWIGgeneratedIGType11077_11091IMAT3;
      p_container_0_0 = is_equal_to_const_char10_iATSMCASE;
      l_shipmode_or_0 = or_iATStreamIWselect_streamIMAT2;
      l_quantity_max_compare_2 = comparator_is_smaller_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      p_brand_equal_0 = is_equal_to_const_char10_iATband0;
      p_size_max_compare_0 = comparator_is_smaller_equal_iATStreamIWint_streamIM;
      p_size_max_compare_1 = comparator_is_smaller_equal_iATStreamIWint_streamIM;
      l_quantity_min_gen_2 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT6;
      p_size_max_gen_0 = const_value_generator_iATStreamIWint_streamIMAT5;
      duplicate_p_brand_equal_0_output = duplicator_iATStreamIWIGgeneratedIGType10601_10615IMAT2;
      duplicate_l_shipmode = duplicator_iATStreamIWSQL_char10_streamIMAT6;
      l_quantity_min_compare_1 = comparator_is_larger_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      p_container_0_3 = is_equal_to_const_char10_iATSMPKG;
      duplicate_p_brand = duplicator_iATStreamIWSQL_char10_streamIMAT3;
      p_brand_equal_1 = is_equal_to_const_char10_iATband1;
      l_quantity_min_gen_0 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT4;
      key_equal_0 = comparator_is_equal_iATStreamIWint_streamIM;
      l_quantity_min_gen_1 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT5;
      p_size_min_gen_0 = const_value_generator_iATStreamIWint_streamIMAT1;
      l_shipmode_or_1 = or_iATStreamIWselect_streamIMAT2;
      l_quantity_min_compare_2 = comparator_is_larger_equal_iATStreamIWSQL_decimal_15_2_streamIM;
      l_quantity_max_gen_2 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT16;
      p_container_0_1 = is_equal_to_const_char10_iATSMBOX;
      p_container_1_2 = is_equal_to_const_char10_iATMEDPKG;
      p_size_min_compare_1 = comparator_is_larger_equal_iATStreamIWint_streamIM;
      and_1 = and_iATStreamIWselect_streamIMAT9;
      p_size_min_compare_2 = comparator_is_larger_equal_iATStreamIWint_streamIM;
      and_2 = and_iATStreamIWselect_streamIMAT9;
      l_quantity_max_gen_0 = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT14;
      duplicate_l_quantity = duplicator_iATStreamIWSQL_decimal_15_2_streamIMAT6;
      l_shipmode_comp_0_0 = is_equal_to_const_char10_iATAIR;
      l_shipinstruct_0 = is_equal_to_const_char25_iATDELIVERINPERSON;
      p_container_1_3 = is_equal_to_const_char10_iATMEDPACK;
      p_container_2_0 = is_equal_to_const_char10_iATLGCASE;
      duplicate_l_quantity.outputAT5 -- l_quantity_max_compare_0.input0;
      p_size_max_compare_2.output -- and_2.inputAT6;
      duplicate_l_shipinstruct_0_output.outputAT2 -- and_2.inputAT8;
      duplicate_p_container.outputAT8 -- p_container_2_2.input;
      l_quantity_min_gen_0.output -- l_quantity_min_compare_0.input1;
      key_equal_0.output -- duplicate_key_equal_0_output.input;
      container_or_0.output -- and_0.inputAT2;
      p_container_1_0.output -- container_or_1.inputAT0;
      p_container_1_3.output -- container_or_1.inputAT3;
      duplicate_p_container.outputAT2 -- p_container_2_0.input;
      duplicate_key_equal_0_output.outputAT2 -- and_0.inputAT0;
      l_quantity_max_gen_0.output -- l_quantity_max_compare_0.input1;
      duplicate_p_brand_equal_0_output.outputAT0 -- and_0.inputAT1;
      p_size_max_gen_1.output -- p_size_max_compare_1.input1;
      p_size_min_gen_2.output -- p_size_min_compare_2.input1;
      l_quantity -- duplicate_l_quantity.input;
      l_shipmode_comp_2_1.output -- l_shipmode_or_2.inputAT1;
      duplicate_l_quantity.outputAT3 -- l_quantity_min_compare_1.input0;
      duplicate_key_equal_0_output.outputAT0 -- and_1.inputAT0;
      duplicate_p_size.outputAT0 -- p_size_min_compare_2.input0;
      duplicate_p_size.outputAT5 -- p_size_min_compare_0.input0;
      l_quantity_max_gen_2.output -- l_quantity_max_compare_2.input1;
      p_container_0_1.output -- container_or_0.inputAT1;
      l_shipinstruct_0.output -- duplicate_l_shipinstruct_0_output.input;
      p_size_min_gen_0.output -- p_size_min_compare_0.input1;
      l_quantity_max_gen_1.output -- l_quantity_max_compare_1.input1;
      l_shipmode_comp_0_0.output -- l_shipmode_or_0.inputAT0;
      duplicate_p_container.outputAT9 -- p_container_0_2.input;
      duplicate_l_shipmode.outputAT1 -- l_shipmode_comp_1_0.input;
      p_size_max_compare_0.output -- and_0.inputAT6;
      l_quantity_min_compare_2.output -- and_2.inputAT3;
      duplicate_p_brand.outputAT2 -- p_brand_equal_0.input;
      duplicate_p_container.outputAT10 -- p_container_1_0.input;
      duplicate_p_container.outputAT11 -- p_container_0_0.input;
      p_size_max_compare_1.output -- and_1.inputAT6;
      l_quantity_min_gen_1.output -- l_quantity_min_compare_1.input1;
      duplicate_l_shipinstruct_0_output.outputAT1 -- and_1.inputAT8;
      l_shipmode -- duplicate_l_shipmode.input;
      p_container_2_0.output -- container_or_2.inputAT0;
      duplicate_l_quantity.outputAT2 -- l_quantity_min_compare_2.input0;
      duplicate_l_shipmode.outputAT4 -- l_shipmode_comp_0_1.input;
      duplicate_l_quantity.outputAT0 -- l_quantity_max_compare_2.input0;
      p_container_2_2.output -- container_or_2.inputAT2;
      and_2.output -- or_0.inputAT2;
      l_shipmode_comp_0_1.output -- l_shipmode_or_0.inputAT1;
      container_or_1.output -- and_1.inputAT2;
      duplicate_p_container.outputAT7 -- p_container_1_3.input;
      duplicate_key_equal_0_output.outputAT1 -- and_2.inputAT0;
      duplicate_l_shipmode.outputAT0 -- l_shipmode_comp_2_1.input;
      duplicate_p_size.outputAT2 -- p_size_max_compare_1.input0;
      duplicate_l_shipmode.outputAT2 -- l_shipmode_comp_2_0.input;
      l_quantity_max_compare_0.output -- and_0.inputAT4;
      p_container_1_1.output -- container_or_1.inputAT1;
      duplicate_p_brand.outputAT0 -- p_brand_equal_1.input;
      p_brand_equal_2.output -- void_p_brand_equal_2_output.input;
      duplicate_p_size.outputAT4 -- p_size_max_compare_0.input0;
      p_partkey -- key_equal_0.input0;
      and_1.output -- or_0.inputAT1;
      p_container_1_2.output -- container_or_1.inputAT2;
      l_quantity_min_compare_1.output -- and_1.inputAT3;
      p_size_min_gen_1.output -- p_size_min_compare_1.input1;
      p_brand -- duplicate_p_brand.input;
      duplicate_p_brand.outputAT1 -- p_brand_equal_2.input;
      p_size_min_compare_1.output -- and_1.inputAT5;
      and_0.output -- or_0.inputAT0;
      p_size -- duplicate_p_size.input;
      l_shipinstruct -- l_shipinstruct_0.input;
      duplicate_p_size.outputAT1 -- p_size_max_compare_2.input0;
      p_container -- duplicate_p_container.input;
      l_partkey -- key_equal_0.input1;
      p_brand_equal_1.output -- and_1.inputAT1;
      l_quantity_min_compare_0.output -- and_0.inputAT3;
      l_shipmode_or_2.output -- and_2.inputAT7;
      l_shipmode_comp_1_0.output -- l_shipmode_or_1.inputAT0;
      duplicate_l_quantity.outputAT4 -- l_quantity_max_compare_1.input0;
      duplicate_l_shipmode.outputAT3 -- l_shipmode_comp_1_1.input;
      p_size_min_compare_2.output -- and_2.inputAT5;
      p_size_max_gen_2.output -- p_size_max_compare_2.input1;
      duplicate_p_brand_equal_0_output.outputAT1 -- and_2.inputAT1;
      duplicate_p_container.outputAT4 -- p_container_2_3.input;
      p_container_2_1.output -- container_or_2.inputAT1;
      p_container_0_0.output -- container_or_0.inputAT0;
      duplicate_l_shipmode.outputAT5 -- l_shipmode_comp_0_0.input;
      p_size_min_compare_0.output -- and_0.inputAT5;
      duplicate_l_shipinstruct_0_output.outputAT0 -- and_0.inputAT8;
      duplicate_p_size.outputAT3 -- p_size_min_compare_1.input0;
      p_brand_equal_0.output -- duplicate_p_brand_equal_0_output.input;
      p_container_0_3.output -- container_or_0.inputAT3;
      l_shipmode_comp_1_1.output -- l_shipmode_or_1.inputAT1;
      or_0.output -- select;
      duplicate_p_container.outputAT0 -- p_container_0_3.input;
      p_container_0_2.output -- container_or_0.inputAT2;
      p_size_max_gen_0.output -- p_size_max_compare_0.input1;
      duplicate_p_container.outputAT3 -- p_container_2_1.input;
      duplicate_p_container.outputAT6 -- p_container_0_1.input;
      l_shipmode_or_0.output -- and_0.inputAT7;
      l_quantity_max_compare_1.output -- and_1.inputAT4;
      l_quantity_max_compare_2.output -- and_2.inputAT4;
      l_shipmode_or_1.output -- and_1.inputAT7;
      container_or_2.output -- and_2.inputAT2;
      l_shipmode_comp_2_0.output -- l_shipmode_or_2.inputAT0;
      duplicate_p_container.outputAT1 -- p_container_1_1.input;
      duplicate_p_container.outputAT5 -- p_container_1_2.input;
      duplicate_l_quantity.outputAT1 -- l_quantity_min_compare_0.input0;
      l_quantity_min_gen_2.output -- l_quantity_min_compare_2.input1;
      p_container_2_3.output -- container_or_2.inputAT3;
    },
  };

  
  streamlet data_filter_i = data_filter_s {
    impl:
    {
      l_discount_filter = stream_filter_1bit_iATStreamIWSQL_decimal_15_2_streamIM;
      selection = where_claus_i;
      duplicate_selection_select = duplicator_iATStreamIWselect_streamIMAT2;
      l_extendedprice_filter = stream_filter_1bit_iATStreamIWSQL_decimal_15_2_streamIM;
      l_discount_in -- l_discount_filter.input;
      p_size -- selection.p_size;
      p_partkey -- selection.p_partkey;
      l_shipmode -- selection.l_shipmode;
      l_discount_filter.output -- l_discount_out;
      l_quantity -- selection.l_quantity;
      l_partkey -- selection.l_partkey;
      p_brand -- selection.p_brand;
      l_shipinstruct -- selection.l_shipinstruct;
      duplicate_selection_select.outputAT1 -- l_extendedprice_filter.select;
      l_extendedprice_filter.output -- l_extendedprice_out;
      p_container -- selection.p_container;
      selection.select -- duplicate_selection_select.input;
      duplicate_selection_select.outputAT0 -- l_discount_filter.select;
      l_extendedprice_in -- l_extendedprice_filter.input;
    },
  };

  
  streamlet main_i = main_s {
    impl:
    {
      data_filter = data_filter_i;
      void_data_src_lineitem_l_comment = void_iATStreamIWvarchar_streamIM;
      void_data_src_part_p_retailprice = void_iATStreamIWSQL_decimal_15_2_streamIM;
      void_data_src_lineitem_l_suppkey = void_iATStreamIWint_streamIM;
      accu = accumulator_iATStreamIWSQL_decimal_15_2_streamIM;
      void_data_src_lineitem_l_receiptdate = void_iATStreamIWdate_streamIM;
      void_accu_count = void_iATStreamIWcount_typeIM;
      adder = adder_iATStreamIWSQL_decimal_15_2_streamIM;
      void_data_src_lineitem_l_shipdate = void_iATStreamIWdate_streamIM;
      void_data_src_part_p_type = void_iATStreamIWvarchar_streamIM;
      void_data_src_part_p_name = void_iATStreamIWvarchar_streamIM;
      void_data_src_part_p_comment = void_iATStreamIWvarchar_streamIM;
      const_value_gen = const_value_generator_iATStreamIWSQL_decimal_15_2_streamIMAT1;
      data_src_part = part_i;
      err_and = and_iATStreamIWerr_streamIMAT3;
      data_src_lineitem = lineitem_i;
      void_data_src_lineitem_l_tax = void_iATStreamIWSQL_decimal_15_2_streamIM;
      multiplier = multiplier_iATStreamIWSQL_decimal_15_2_streamIM;
      void_data_src_lineitem_l_commitdate = void_iATStreamIWdate_streamIM;
      void_data_src_part_p_mfgr = void_iATStreamIWSQL_char25_streamIM;
      void_data_src_lineitem_l_linestatus = void_iATStreamIWSQL_char1_streamIM;
      void_data_src_lineitem_l_returnflag = void_iATStreamIWSQL_char1_streamIM;
      duplicate_p_partkey = duplicator_iATStreamIWint_streamIMAT2;
      to_neg = to_neg_iATStreamIWSQL_decimal_15_2_streamIM;
      data_src_lineitem.l_shipmode -- data_filter.l_shipmode;
      adder.output -- multiplier.input0;
      data_src_lineitem.l_receiptdate -- void_data_src_lineitem_l_receiptdate.input;
      accu.count -- void_accu_count.input;
      data_src_part.p_name -- void_data_src_part_p_name.input;
      data_src_part.p_comment -- void_data_src_part_p_comment.input;
      adder.overflow -- err_and.inputAT2;
      data_src_lineitem.l_returnflag -- void_data_src_lineitem_l_returnflag.input;
      data_src_lineitem.l_tax -- void_data_src_lineitem_l_tax.input;
      data_src_lineitem.l_shipdate -- void_data_src_lineitem_l_shipdate.input;
      accu.overflow -- err_and.inputAT1;
      multiplier.overflow -- err_and.inputAT0;
      data_src_lineitem.l_comment -- void_data_src_lineitem_l_comment.input;
      data_src_part.p_type -- void_data_src_part_p_type.input;
      data_src_lineitem.l_linestatus -- void_data_src_lineitem_l_linestatus.input;
      data_src_lineitem.l_shipinstruct -- data_filter.l_shipinstruct;
      data_src_lineitem.l_partkey -- data_filter.l_partkey;
      const_value_gen.output -- adder.input0;
      duplicate_p_partkey.outputAT0 -- data_src_part.p_partkey;
      duplicate_p_partkey.outputAT1 -- data_filter.p_partkey;
      l_orderkey -- data_src_lineitem.l_orderkey;
      data_src_lineitem.l_extendedprice -- data_filter.l_extendedprice_in;
      err_and.output -- err;
      data_src_part.p_mfgr -- void_data_src_part_p_mfgr.input;
      accu.output -- revenue;
      data_src_lineitem.l_quantity -- data_filter.l_quantity;
      p_partkey -- duplicate_p_partkey.input;
      data_src_part.p_container -- data_filter.p_container;
      multiplier.output -- accu.input;
      data_filter.l_discount_out -- to_neg.input;
      data_src_lineitem.l_commitdate -- void_data_src_lineitem_l_commitdate.input;
      data_src_part.p_brand -- data_filter.p_brand;
      data_src_part.p_retailprice -- void_data_src_part_p_retailprice.input;
      to_neg.output -- adder.input1;
      data_src_part.p_size -- data_filter.p_size;
      data_src_lineitem.l_suppkey -- void_data_src_lineitem_l_suppkey.input;
      data_filter.l_extendedprice_out -- multiplier.input1;
      data_src_lineitem.l_discount -- data_filter.l_discount_in;
      l_linenumber -- data_src_lineitem.l_linenumber;
    },
  };


}