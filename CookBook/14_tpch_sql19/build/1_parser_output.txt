Project(test_project){
  Package(tpch){
    Scope(package_tpch){
      Variables{
        $package$tpch:PackageType(NotInferred(""))
        month_max:UnknownType(NotInferred("12"))
        year_max:UnknownType(NotInferred("10^5 - 1"))
        day_max:UnknownType(NotInferred("31"))
        max_decimal_15:UnknownType(NotInferred("10^15 - 1"))
        bit_width_decimal_15:UnknownType(NotInferred("ceil(log2(max_decimal_15))"))
      }
      Types{
        SQL_char:Bit(NotInferred("8"))
        SQL_char25:Bit(NotInferred("8*25"))
        SQL_char25_stream:Stream(SQL_char25_stream){
          DataType=VarType(SQL_char25)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        select_stream:Stream(select_stream){
          DataType=Bit(NotInferred("1"))
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        int_stream:Stream(int_stream){
          DataType=VarType(SQL_int)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        Date:DataGroup(Date){
          Scope(group_Date){
            Types{
              year:VarType(year_t)
              day:VarType(day_t)
              month:VarType(month_t)
            }
            ScopeRelations{
              --GroupScope-->package_tpch
            }
          }
        }
        year_stream:Stream(year_stream){
          DataType=VarType(year_t)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        year_t:Bit(NotInferred("ceil(log2(year_max))"))
        month_t:Bit(NotInferred("ceil(log2(month_max))"))
        month_stream:Stream(month_stream){
          DataType=VarType(month_t)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        day_stream:Stream(day_stream){
          DataType=VarType(day_t)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        stream_filter_select_stream_1bit:Stream(stream_filter_select_stream_1bit){
          DataType=Bit(NotInferred("1"))
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_int:Bit(NotInferred("32"))
        varchar_stream:Stream(varchar_stream){
          DataType=VarType(SQL_char)
          dimension=NotInferred("2"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        date_stream:Stream(date_stream){
          DataType=VarType(Date)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char1_stream:Stream(SQL_char1_stream){
          DataType=VarType(SQL_char)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        day_t:Bit(NotInferred("ceil(log2(day_max))"))
        SQL_char10_stream:Stream(SQL_char10_stream){
          DataType=VarType(SQL_char10)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char10:Bit(NotInferred("8*10"))
        SQL_char15:Bit(NotInferred("8*15"))
        SQL_char15_stream:Stream(SQL_char15_stream){
          DataType=VarType(SQL_char15)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_decimal_15_2_stream:Stream(SQL_decimal_15_2_stream){
          DataType=VarType(SQL_decimal_15_2)
          dimension=NotInferred("1"), user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        stream_filter_select_stream:Stream(stream_filter_select_stream){
          DataType=Bit(NotInferred("2"))
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_decimal_15_2:DataGroup(SQL_decimal_15_2){
          Scope(group_SQL_decimal_15_2){
            Variables{
              frac:UnknownType(NotInferred("2"))
            }
            Types{
              decimal:VarType(SQL_decimal_15)
            }
            ScopeRelations{
              --GroupScope-->package_tpch
            }
          }
        }
        key_stream:VarType(int_stream)
        SQL_decimal_15:Bit(NotInferred("bit_width_decimal_15"))
      }
      Streamlets{
        Streamlet(nation_s)<NormalStreamlet>{
          Scope(streamlet_nation_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              n_name:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
              n_nationkey:Port(VarType(key_stream),in) `DefaultClockDomain
              n_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              n_regionkey:Port(VarType(key_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_is_larger_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_is_larger_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input1:Port(VarType(type_in),in) `DefaultClockDomain
              input0:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type8717_8731),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(multiplier_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_multiplier_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input1:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
              input0:Port(VarType(data_type),in) `DefaultClockDomain
              overflow:Port(Stream($generated$Type8252_8266),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_stream_filter_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              select:Port(VarType(stream_filter_select_stream),in) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(adder_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_adder_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input0:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
              overflow:Port(Stream($generated$Type7814_7828),out) `DefaultClockDomain
              input1:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(or_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_or_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              input_channel:int(NotInferred("$arg$input_channel"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              input:PortArray[NotInferred("input_channel")](VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_is_smaller_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_is_smaller_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input0:Port(VarType(type_in),in) `DefaultClockDomain
              input1:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type8981_8995),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_char25_generator_s)<@string>{
          Scope(streamlet_const_char25_generator_s){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(where_claus_s)<NormalStreamlet>{
          Scope(streamlet_where_claus_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              p_brand:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
              p_container:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
              l_shipmode:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
              p_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              select:Port(VarType(select_stream),out) `DefaultClockDomain
              l_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              l_shipinstruct:Port(VarType(SQL_char25_stream),in) `DefaultClockDomain
              p_size:Port(VarType(int_stream),in) `DefaultClockDomain
              l_quantity:Port(VarType(SQL_decimal_15_2_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(orders_s)<NormalStreamlet>{
          Scope(streamlet_orders_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              o_orderkey:Port(VarType(key_stream),in) `DefaultClockDomain
              o_orderdate:Port(VarType(date_stream),out) `DefaultClockDomain
              o_orderpriority:Port(VarType(SQL_char15_stream),out) `DefaultClockDomain
              o_shippriority:Port(VarType(int_stream),out) `DefaultClockDomain
              o_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              o_custkey:Port(VarType(key_stream),out) `DefaultClockDomain
              o_totalprice:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              o_orderstatus:Port(VarType(SQL_char1_stream),out) `DefaultClockDomain
              o_clerk:Port(VarType(SQL_char15_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(partsupp_s)<NormalStreamlet>{
          Scope(streamlet_partsupp_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              ps_supplycost:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              ps_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              ps_suppkey:Port(VarType(key_stream),in) `DefaultClockDomain
              ps_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              ps_availqty:Port(VarType(int_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_is_larger_equal_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_is_larger_equal_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input1:Port(VarType(type_in),in) `DefaultClockDomain
              input0:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type9260_9274),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_is_smaller_equal_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_is_smaller_equal_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(Stream($generated$Type9551_9565),out) `DefaultClockDomain
              input0:Port(VarType(type_in),in) `DefaultClockDomain
              input1:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(accumulator_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_accumulator_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            Types{
              count_type:Stream(count_type){
                DataType=Bit(NotInferred("32"))
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              overflow_type:Stream(overflow_type){
                DataType=Bit(NotInferred("1"))
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              count:Port(VarType(count_type),out) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
              overflow:Port(VarType(overflow_type),out) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(converter_s)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_converter_s){
            Variables{
              channel:int(NotInferred("$arg$channel"))
              input_type:DummyLogicalData(NotInferred("$arg$input_type"))
              output_type:DummyLogicalData(NotInferred("$arg$output_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input:PortArray[NotInferred("channel")](VarType(input_type),in) `DefaultClockDomain
              output:PortArray[NotInferred("channel")](VarType(output_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(and_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_and_s){
            Variables{
              input_channel:int(NotInferred("$arg$input_channel"))
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              input:PortArray[NotInferred("input_channel")](VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(region_s)<NormalStreamlet>{
          Scope(streamlet_region_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              r_regionkey:Port(VarType(key_stream),in) `DefaultClockDomain
              r_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              r_name:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_const_value_generator_s){
            Variables{
              value:int(NotInferred("$arg$value"))
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(type_out),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(supplier_s)<NormalStreamlet>{
          Scope(streamlet_supplier_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              s_acctbal:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              s_suppkey:Port(VarType(key_stream),in) `DefaultClockDomain
              s_address:Port(VarType(varchar_stream),out) `DefaultClockDomain
              s_name:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
              s_nationkey:Port(VarType(key_stream),out) `DefaultClockDomain
              s_phone:Port(VarType(SQL_char15_stream),out) `DefaultClockDomain
              s_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(is_equal_to_const_char10_s)<@string>{
          Scope(streamlet_is_equal_to_const_char10_s){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(Stream($generated$Type10601_10615),out) `DefaultClockDomain
              input:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(lineitem_s)<NormalStreamlet>{
          Scope(streamlet_lineitem_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              l_shipinstruct:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
              l_partkey:Port(VarType(key_stream),out) `DefaultClockDomain
              l_receiptdate:Port(VarType(date_stream),out) `DefaultClockDomain
              l_extendedprice:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_suppkey:Port(VarType(key_stream),out) `DefaultClockDomain
              l_orderkey:Port(VarType(key_stream),in) `DefaultClockDomain
              l_shipdate:Port(VarType(date_stream),out) `DefaultClockDomain
              l_discount:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_quantity:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_shipmode:Port(VarType(SQL_char10_stream),out) `DefaultClockDomain
              l_linenumber:Port(VarType(key_stream),in) `DefaultClockDomain
              l_tax:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_returnflag:Port(VarType(SQL_char1_stream),out) `DefaultClockDomain
              l_linestatus:Port(VarType(SQL_char1_stream),out) `DefaultClockDomain
              l_commitdate:Port(VarType(date_stream),out) `DefaultClockDomain
              l_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(data_filter_s)<NormalStreamlet>{
          Scope(streamlet_data_filter_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              p_size:Port(VarType(int_stream),in) `DefaultClockDomain
              l_extendedprice_out:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              p_container:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
              l_shipinstruct:Port(VarType(SQL_char25_stream),in) `DefaultClockDomain
              p_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              l_quantity:Port(VarType(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_extendedprice_in:Port(VarType(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              l_discount_out:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_discount_in:Port(VarType(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              p_brand:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
              l_shipmode:Port(VarType(SQL_char10_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(main_s)<NormalStreamlet>{
          Scope(streamlet_main_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              l_linenumber:Port(VarType(key_stream),in) `DefaultClockDomain
              p_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              revenue:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_orderkey:Port(VarType(key_stream),in) `DefaultClockDomain
              err:Port(Stream($generated$Type23774_23788),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(padding_zero_s)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_padding_zero_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              stream_out:Port(VarType(type_out),out) `DefaultClockDomain
              stream_in:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(duplicator_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_duplicator_s){
            Variables{
              output_channel:int(NotInferred("$arg$output_channel"))
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:PortArray[NotInferred("output_channel")](VarType(data_type),out) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(is_equal_to_const_char25_s)<@string>{
          Scope(streamlet_is_equal_to_const_char25_s){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(Stream($generated$Type11077_11091),out) `DefaultClockDomain
              input:Port(VarType(SQL_char25_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(part_s)<NormalStreamlet>{
          Scope(streamlet_part_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              p_size:Port(VarType(int_stream),out) `DefaultClockDomain
              p_container:Port(VarType(SQL_char10_stream),out) `DefaultClockDomain
              p_mfgr:Port(VarType(SQL_char25_stream),out) `DefaultClockDomain
              p_brand:Port(VarType(SQL_char10_stream),out) `DefaultClockDomain
              p_partkey:Port(VarType(key_stream),in) `DefaultClockDomain
              p_type:Port(VarType(varchar_stream),out) `DefaultClockDomain
              p_retailprice:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              p_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              p_name:Port(VarType(varchar_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input1:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type5166_5180),out) `DefaultClockDomain
              input0:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(to_neg_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_to_neg_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_is_equal_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_is_equal_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input1:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type9825_9839),out) `DefaultClockDomain
              input0:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_char10_generator_s)<@string>{
          Scope(streamlet_const_char10_generator_s){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(SQL_char10_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(void_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_void_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              input:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_1bit_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_stream_filter_1bit_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              select:Port(VarType(stream_filter_select_stream_1bit),in) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(customer_s)<NormalStreamlet>{
          Scope(streamlet_customer_s){
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              c_comment:Port(VarType(varchar_stream),out) `DefaultClockDomain
              c_custkey:Port(VarType(key_stream),in) `DefaultClockDomain
              c_acctbal:Port(VarType(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              c_address:Port(VarType(varchar_stream),out) `DefaultClockDomain
              c_phone:Port(VarType(SQL_char15_stream),out) `DefaultClockDomain
              c_name:Port(VarType(varchar_stream),out) `DefaultClockDomain
              c_mktsegment:Port(VarType(SQL_char10_stream),out) `DefaultClockDomain
              c_nationkey:Port(VarType(key_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(divider_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_divider_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_tpch
            }
            Ports{
              divisor:Port(VarType(data_type),in) `DefaultClockDomain
              quotient:Port(VarType(data_type),out) `DefaultClockDomain
              dividend:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
      }
      Implements{
        Implement(stream_filter_1bit_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(stream_filter_1bit_s<@data_type>){
          Scope(implement_stream_filter_1bit_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(or_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(or_s<@data_type@input_channel>){
          Scope(implement_or_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              input_channel:int(NotInferred("$arg$input_channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(supplier_i)<NormalImplement> -> ProxyStreamlet(supplier_s<>){
          Scope(implement_supplier_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(customer_i)<NormalImplement> -> ProxyStreamlet(customer_s<>){
          Scope(implement_customer_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(orders_i)<NormalImplement> -> ProxyStreamlet(orders_s<>){
          Scope(implement_orders_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(void_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(void_s<@type_in>){
          Scope(implement_void_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_is_smaller_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_is_smaller_s<@type_in>){
          Scope(implement_comparator_is_smaller_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(const_char25_generator_i)<@string> -> ProxyStreamlet(const_char25_generator_s<@value>){
          Scope(implement_const_char25_generator_i){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(stream_filter_s<@data_type>){
          Scope(implement_stream_filter_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(to_neg_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(to_neg_s<@data_type>){
          Scope(implement_to_neg_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_is_smaller_equal_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_is_smaller_equal_s<@type_in>){
          Scope(implement_comparator_is_smaller_equal_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(adder_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(adder_s<@data_type>){
          Scope(implement_adder_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(data_filter_i)<NormalImplement> -> ProxyStreamlet(data_filter_s<>){
          Scope(implement_data_filter_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
            Instances{
              l_discount_filter:(NotInferred("stream_filter_1bit_i"))
              selection:(NotInferred("where_claus_i"))
              l_extendedprice_filter:(NotInferred("stream_filter_1bit_i"))
            }
            Connections{
              Self.NotInferred("l_discount_in") =0=> ExternalOwner(l_discount_filter).NotInferred("input") (connection_23468-23509) 
              Self.NotInferred("p_container") =0=> ExternalOwner(selection).NotInferred("p_container") (connection_22930-22967) 
              ExternalOwner(selection).NotInferred("select") =0=> ExternalOwner(l_discount_filter).NotInferred("select") (connection_23513-23558) 
              Self.NotInferred("p_size") =0=> ExternalOwner(selection).NotInferred("p_size") (connection_23010-23037) 
              Self.NotInferred("p_partkey") =0=> ExternalOwner(selection).NotInferred("p_partkey") (connection_22823-22856) 
              ExternalOwner(selection).NotInferred("select") =0=> ExternalOwner(l_extendedprice_filter).NotInferred("select") (connection_23272-23322) 
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(selection).NotInferred("l_shipmode") (connection_23041-23076) 
              Self.NotInferred("l_extendedprice_in") =0=> ExternalOwner(l_extendedprice_filter).NotInferred("input") (connection_23217-23268) 
              Self.NotInferred("l_quantity") =0=> ExternalOwner(selection).NotInferred("l_quantity") (connection_22971-23006) 
              ExternalOwner(l_discount_filter).NotInferred("output") =0=> Self.NotInferred("l_discount_out") (connection_23562-23605) 
              Self.NotInferred("l_partkey") =0=> ExternalOwner(selection).NotInferred("l_partkey") (connection_22860-22893) 
              Self.NotInferred("p_brand") =0=> ExternalOwner(selection).NotInferred("p_brand") (connection_22897-22926) 
              Self.NotInferred("l_shipinstruct") =0=> ExternalOwner(selection).NotInferred("l_shipinstruct") (connection_23080-23123) 
              ExternalOwner(l_extendedprice_filter).NotInferred("output") =0=> Self.NotInferred("l_extendedprice_out") (connection_23326-23379) 
            }
          }
          simulation_process{None}
        }
        Implement(multiplier_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(multiplier_s<@data_type>){
          Scope(implement_multiplier_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(duplicator_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(duplicator_s<@data_type@output_channel>){
          Scope(implement_duplicator_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              output_channel:int(NotInferred("$arg$output_channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(partsupp_i)<NormalImplement> -> ProxyStreamlet(partsupp_s<>){
          Scope(implement_partsupp_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(lineitem_i)<NormalImplement> -> ProxyStreamlet(lineitem_s<>){
          Scope(implement_lineitem_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(region_i)<NormalImplement> -> ProxyStreamlet(region_s<>){
          Scope(implement_region_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(where_claus_i)<NormalImplement> -> ProxyStreamlet(where_claus_s<>){
          Scope(implement_where_claus_i){
            Variables{
              containers:UnknownType(NotInferred("{"SM CASE", "SM BOX", "SM PACK", "SM PKG",
                    "MED BAG", "MED BOX", "MED PKG", "MED PACK",
                    "LG CASE", "LG BOX", "LG PACK", "LG PKG"}"))
              size_max:UnknownType(NotInferred("{5,10,15}"))
              quantity_min:UnknownType(NotInferred("{4,5,6}"))
              shipmodes:UnknownType(NotInferred("{"AIR","AIR REG"}"))
              quantity_max:UnknownType(NotInferred("{14,15,16}"))
              shipinstruct:UnknownType(NotInferred(""DELIVER IN PERSON""))
              bands:UnknownType(NotInferred("{"band0", "band1", "band2"}"))
              size_min:UnknownType(NotInferred("{1,1,1}"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
            Instances{
              p_size_min_gen_2:(NotInferred("const_value_generator_i"))
              or_0:(NotInferred("or_i"))
              l_quantity_max_compare_0:(NotInferred("comparator_is_smaller_equal_i"))
              container_or_0:(NotInferred("or_i"))
              p_size_max_gen_2:(NotInferred("const_value_generator_i"))
              p_container_2_1:(NotInferred("is_equal_to_const_char10_i"))
              container_or_1:(NotInferred("or_i"))
              p_container_1_0:(NotInferred("is_equal_to_const_char10_i"))
              l_shipmode_comp_1_1:(NotInferred("is_equal_to_const_char10_i"))
              and_0:(NotInferred("and_i"))
              p_container_1_1:(NotInferred("is_equal_to_const_char10_i"))
              l_shipmode_comp_2_0:(NotInferred("is_equal_to_const_char10_i"))
              l_shipmode_comp_2_1:(NotInferred("is_equal_to_const_char10_i"))
              p_brand_equal_2:(NotInferred("is_equal_to_const_char10_i"))
              l_shipmode_or_2:(NotInferred("or_i"))
              l_quantity_max_compare_1:(NotInferred("comparator_is_smaller_equal_i"))
              p_size_min_compare_0:(NotInferred("comparator_is_larger_equal_i"))
              l_shipmode_comp_1_0:(NotInferred("is_equal_to_const_char10_i"))
              p_container_2_3:(NotInferred("is_equal_to_const_char10_i"))
              p_size_max_compare_2:(NotInferred("comparator_is_smaller_equal_i"))
              p_container_2_2:(NotInferred("is_equal_to_const_char10_i"))
              p_size_min_gen_1:(NotInferred("const_value_generator_i"))
              l_shipmode_comp_0_1:(NotInferred("is_equal_to_const_char10_i"))
              container_or_2:(NotInferred("or_i"))
              l_quantity_min_compare_0:(NotInferred("comparator_is_larger_equal_i"))
              p_container_0_2:(NotInferred("is_equal_to_const_char10_i"))
              p_size_max_gen_1:(NotInferred("const_value_generator_i"))
              l_quantity_max_gen_1:(NotInferred("const_value_generator_i"))
              p_container_0_0:(NotInferred("is_equal_to_const_char10_i"))
              l_shipmode_or_0:(NotInferred("or_i"))
              l_quantity_max_compare_2:(NotInferred("comparator_is_smaller_equal_i"))
              p_brand_equal_0:(NotInferred("is_equal_to_const_char10_i"))
              p_size_max_compare_0:(NotInferred("comparator_is_smaller_equal_i"))
              p_size_max_compare_1:(NotInferred("comparator_is_smaller_equal_i"))
              l_quantity_min_gen_2:(NotInferred("const_value_generator_i"))
              p_size_max_gen_0:(NotInferred("const_value_generator_i"))
              l_quantity_min_compare_1:(NotInferred("comparator_is_larger_equal_i"))
              p_container_0_3:(NotInferred("is_equal_to_const_char10_i"))
              p_brand_equal_1:(NotInferred("is_equal_to_const_char10_i"))
              l_quantity_min_gen_0:(NotInferred("const_value_generator_i"))
              key_equal_0:(NotInferred("comparator_is_equal_i"))
              l_quantity_min_gen_1:(NotInferred("const_value_generator_i"))
              p_size_min_gen_0:(NotInferred("const_value_generator_i"))
              l_shipmode_or_1:(NotInferred("or_i"))
              l_quantity_min_compare_2:(NotInferred("comparator_is_larger_equal_i"))
              l_quantity_max_gen_2:(NotInferred("const_value_generator_i"))
              p_container_0_1:(NotInferred("is_equal_to_const_char10_i"))
              p_container_1_2:(NotInferred("is_equal_to_const_char10_i"))
              p_size_min_compare_1:(NotInferred("comparator_is_larger_equal_i"))
              and_1:(NotInferred("and_i"))
              p_size_min_compare_2:(NotInferred("comparator_is_larger_equal_i"))
              and_2:(NotInferred("and_i"))
              l_quantity_max_gen_0:(NotInferred("const_value_generator_i"))
              l_shipmode_comp_0_0:(NotInferred("is_equal_to_const_char10_i"))
              l_shipinstruct_0:(NotInferred("is_equal_to_const_char25_i"))
              p_container_1_3:(NotInferred("is_equal_to_const_char10_i"))
              p_container_2_0:(NotInferred("is_equal_to_const_char10_i"))
            }
            Connections{
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_max_compare_2).NotInferred("input0") (connection_20804-20850) 
              ExternalOwner(p_size_max_compare_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("6")] (connection_21594-21655) @NoStrictType
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_2_1).NotInferred("input") (connection_21913-21953) 
              ExternalOwner(l_quantity_min_gen_0).NotInferred("output") =0=> ExternalOwner(l_quantity_min_compare_0).NotInferred("input1") (connection_13938-14001) 
              ExternalOwner(container_or_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("2")] (connection_13623-13678) @NoStrictType
              ExternalOwner(p_container_1_0).NotInferred("output") =0=> ExternalOwner(container_or_1).NotInferred("input")[NotInferred("0")] (connection_16666-16731) @NoStrictType
              ExternalOwner(p_container_1_3).NotInferred("output") =0=> ExternalOwner(container_or_1).NotInferred("input")[NotInferred("3")] (connection_16873-16938) @NoStrictType
              ExternalOwner(key_equal_0).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("0")] (connection_15933-15985) @NoStrictType
              ExternalOwner(l_quantity_max_gen_0).NotInferred("output") =0=> ExternalOwner(l_quantity_max_compare_0).NotInferred("input1") (connection_14331-14394) 
              ExternalOwner(p_brand_equal_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("1")] (connection_12776-12832) @NoStrictType
              ExternalOwner(p_size_max_gen_1).NotInferred("output") =0=> ExternalOwner(p_size_max_compare_1).NotInferred("input1") (connection_18331-18386) 
              ExternalOwner(p_size_min_gen_2).NotInferred("output") =0=> ExternalOwner(p_size_min_compare_2).NotInferred("input1") (connection_21200-21255) 
              Self.NotInferred("p_brand") =0=> ExternalOwner(p_brand_equal_1).NotInferred("input") (connection_16058-16091) 
              ExternalOwner(l_shipmode_comp_2_1).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_2).NotInferred("input")[NotInferred("1")] (connection_22031-22101) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_0_3).NotInferred("input") (connection_13306-13343) 
              ExternalOwner(l_shipinstruct_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("8")] (connection_15761-15818) @NoStrictType
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_min_compare_2).NotInferred("input0") (connection_21158-21196) 
              ExternalOwner(l_quantity_max_gen_2).NotInferred("output") =0=> ExternalOwner(l_quantity_max_compare_2).NotInferred("input1") (connection_20854-20917) 
              ExternalOwner(p_container_0_1).NotInferred("output") =0=> ExternalOwner(container_or_0).NotInferred("input")[NotInferred("1")] (connection_13416-13481) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_1_1).NotInferred("input") (connection_16543-16580) 
              ExternalOwner(p_size_min_gen_0).NotInferred("output") =0=> ExternalOwner(p_size_min_compare_0).NotInferred("input1") (connection_14677-14732) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_2_0).NotInferred("input") (connection_19706-19743) 
              ExternalOwner(l_quantity_max_gen_1).NotInferred("output") =0=> ExternalOwner(l_quantity_max_compare_1).NotInferred("input1") (connection_17650-17713) 
              ExternalOwner(l_shipmode_comp_0_0).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_0).NotInferred("input")[NotInferred("0")] (connection_15434-15504) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_2_1).NotInferred("input") (connection_19747-19784) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_2_3).NotInferred("input") (connection_19829-19866) 
              ExternalOwner(p_size_max_compare_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("6")] (connection_15071-15132) @NoStrictType
              ExternalOwner(l_quantity_min_compare_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("3")] (connection_20528-20593) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_1_2).NotInferred("input") (connection_16584-16621) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_0_1).NotInferred("input") (connection_13224-13261) 
              ExternalOwner(p_size_max_compare_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("6")] (connection_18390-18451) @NoStrictType
              ExternalOwner(l_quantity_min_gen_1).NotInferred("output") =0=> ExternalOwner(l_quantity_min_compare_1).NotInferred("input1") (connection_17257-17320) 
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_max_compare_2).NotInferred("input0") (connection_21493-21531) 
              ExternalOwner(l_shipinstruct_0).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("8")] (connection_18963-19020) @NoStrictType
              ExternalOwner(key_equal_0).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("0")] (connection_19135-19187) @NoStrictType
              ExternalOwner(p_brand_equal_0).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("1")] (connection_19297-19353) @NoStrictType
              ExternalOwner(p_container_2_0).NotInferred("output") =0=> ExternalOwner(container_or_2).NotInferred("input")[NotInferred("0")] (connection_19870-19935) @NoStrictType
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_1_0).NotInferred("input") (connection_18665-18705) 
              ExternalOwner(p_container_2_2).NotInferred("output") =0=> ExternalOwner(container_or_2).NotInferred("input")[NotInferred("2")] (connection_20008-20073) @NoStrictType
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_max_compare_1).NotInferred("input0") (connection_18289-18327) 
              ExternalOwner(and_2).NotInferred("output") =0=> ExternalOwner(or_0).NotInferred("input")[NotInferred("2")] (connection_19099-19129) 
              ExternalOwner(l_shipmode_comp_0_1).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_0).NotInferred("input")[NotInferred("1")] (connection_15508-15578) @NoStrictType
              ExternalOwner(container_or_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("2")] (connection_16942-16997) @NoStrictType
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_2_0).NotInferred("input") (connection_21869-21909) 
              ExternalOwner(l_quantity_max_compare_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("4")] (connection_14398-14463) @NoStrictType
              ExternalOwner(p_container_1_1).NotInferred("output") =0=> ExternalOwner(container_or_1).NotInferred("input")[NotInferred("1")] (connection_16735-16800) @NoStrictType
              Self.NotInferred("p_brand") =0=> ExternalOwner(p_brand_equal_2).NotInferred("input") (connection_19260-19293) 
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_1_1).NotInferred("input") (connection_18709-18749) 
              Self.NotInferred("p_partkey") =0=> ExternalOwner(key_equal_0).NotInferred("input0") (connection_12542-12574) 
              ExternalOwner(key_equal_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("0")] (connection_12614-12666) @NoStrictType
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_min_compare_0).NotInferred("input0") (connection_13888-13934) 
              ExternalOwner(and_1).NotInferred("output") =0=> ExternalOwner(or_0).NotInferred("input")[NotInferred("1")] (connection_15897-15927) 
              ExternalOwner(p_container_1_2).NotInferred("output") =0=> ExternalOwner(container_or_1).NotInferred("input")[NotInferred("2")] (connection_16804-16869) @NoStrictType
              ExternalOwner(l_quantity_min_compare_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("3")] (connection_17324-17389) @NoStrictType
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_min_compare_1).NotInferred("input0") (connection_17954-17992) 
              ExternalOwner(p_size_min_gen_1).NotInferred("output") =0=> ExternalOwner(p_size_min_compare_1).NotInferred("input1") (connection_17996-18051) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_1_3).NotInferred("input") (connection_16625-16662) 
              ExternalOwner(p_size_min_compare_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("5")] (connection_18055-18116) @NoStrictType
              ExternalOwner(and_0).NotInferred("output") =0=> ExternalOwner(or_0).NotInferred("input")[NotInferred("0")] (connection_12443-12473) 
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_0_1).NotInferred("input") (connection_15390-15430) 
              Self.NotInferred("l_shipinstruct") =0=> ExternalOwner(l_shipinstruct_0).NotInferred("input") (connection_15716-15757) 
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_min_compare_2).NotInferred("input0") (connection_20411-20457) 
              Self.NotInferred("l_partkey") =0=> ExternalOwner(key_equal_0).NotInferred("input1") (connection_12578-12610) 
              ExternalOwner(p_brand_equal_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("1")] (connection_16095-16151) @NoStrictType
              ExternalOwner(l_quantity_min_compare_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("3")] (connection_14005-14070) @NoStrictType
              ExternalOwner(l_shipmode_or_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("7")] (connection_22105-22161) @NoStrictType
              ExternalOwner(l_shipmode_comp_1_0).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_1).NotInferred("input")[NotInferred("0")] (connection_18753-18823) @NoStrictType
              Self.NotInferred("p_brand") =0=> ExternalOwner(p_brand_equal_0).NotInferred("input") (connection_12739-12772) 
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_max_compare_0).NotInferred("input0") (connection_14970-15008) 
              ExternalOwner(p_size_min_compare_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("5")] (connection_21259-21320) @NoStrictType
              ExternalOwner(p_size_max_gen_2).NotInferred("output") =0=> ExternalOwner(p_size_max_compare_2).NotInferred("input1") (connection_21535-21590) 
              ExternalOwner(p_container_2_1).NotInferred("output") =0=> ExternalOwner(container_or_2).NotInferred("input")[NotInferred("1")] (connection_19939-20004) @NoStrictType
              ExternalOwner(p_container_0_0).NotInferred("output") =0=> ExternalOwner(container_or_0).NotInferred("input")[NotInferred("0")] (connection_13347-13412) @NoStrictType
              ExternalOwner(p_size_min_compare_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("5")] (connection_14736-14797) @NoStrictType
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_min_compare_1).NotInferred("input0") (connection_17207-17253) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_2_2).NotInferred("input") (connection_19788-19825) 
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_0_2).NotInferred("input") (connection_13265-13302) 
              Self.NotInferred("l_shipmode") =0=> ExternalOwner(l_shipmode_comp_0_0).NotInferred("input") (connection_15346-15386) 
              ExternalOwner(p_container_0_3).NotInferred("output") =0=> ExternalOwner(container_or_0).NotInferred("input")[NotInferred("3")] (connection_13554-13619) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_1_0).NotInferred("input") (connection_16502-16539) 
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_max_compare_1).NotInferred("input0") (connection_17600-17646) 
              ExternalOwner(l_shipmode_comp_1_1).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_1).NotInferred("input")[NotInferred("1")] (connection_18827-18897) @NoStrictType
              ExternalOwner(l_shipinstruct_0).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("8")] (connection_22167-22224) @NoStrictType
              ExternalOwner(or_0).NotInferred("output") =0=> Self.NotInferred("select") (connection_11859-11881) 
              ExternalOwner(p_container_0_2).NotInferred("output") =0=> ExternalOwner(container_or_0).NotInferred("input")[NotInferred("2")] (connection_13485-13550) @NoStrictType
              ExternalOwner(p_size_max_gen_0).NotInferred("output") =0=> ExternalOwner(p_size_max_compare_0).NotInferred("input1") (connection_15012-15067) 
              ExternalOwner(l_shipmode_or_0).NotInferred("output") =0=> ExternalOwner(and_0).NotInferred("input")[NotInferred("7")] (connection_15582-15638) @NoStrictType
              ExternalOwner(l_quantity_max_compare_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("4")] (connection_17717-17782) @NoStrictType
              ExternalOwner(l_quantity_max_compare_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("4")] (connection_20921-20986) @NoStrictType
              ExternalOwner(l_shipmode_or_1).NotInferred("output") =0=> ExternalOwner(and_1).NotInferred("input")[NotInferred("7")] (connection_18901-18957) @NoStrictType
              Self.NotInferred("p_size") =0=> ExternalOwner(p_size_min_compare_0).NotInferred("input0") (connection_14635-14673) 
              ExternalOwner(container_or_2).NotInferred("output") =0=> ExternalOwner(and_2).NotInferred("input")[NotInferred("2")] (connection_20146-20201) @NoStrictType
              ExternalOwner(l_shipmode_comp_2_0).NotInferred("output") =0=> ExternalOwner(l_shipmode_or_2).NotInferred("input")[NotInferred("0")] (connection_21957-22027) @NoStrictType
              Self.NotInferred("p_container") =0=> ExternalOwner(p_container_0_0).NotInferred("input") (connection_13183-13220) 
              Self.NotInferred("l_quantity") =0=> ExternalOwner(l_quantity_max_compare_0).NotInferred("input0") (connection_14281-14327) 
              ExternalOwner(l_quantity_min_gen_2).NotInferred("output") =0=> ExternalOwner(l_quantity_min_compare_2).NotInferred("input1") (connection_20461-20524) 
              ExternalOwner(p_container_2_3).NotInferred("output") =0=> ExternalOwner(container_or_2).NotInferred("input")[NotInferred("3")] (connection_20077-20142) @NoStrictType
            }
          }
          simulation_process{None}
        }
        Implement(nation_i)<NormalImplement> -> ProxyStreamlet(nation_s<>){
          Scope(implement_nation_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(main_i)<NormalImplement> -> ProxyStreamlet(main_s<>){
          Scope(implement_main_i){
            Types{
              err_stream:Stream(err_stream){
                DataType=Bit(NotInferred("1"))
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
            Instances{
              to_neg:(NotInferred("to_neg_i"))
              data_src_part:(NotInferred("part_i"))
              data_filter:(NotInferred("data_filter_i"))
              accu:(NotInferred("accumulator_i"))
              data_src_lineitem:(NotInferred("lineitem_i"))
              err_and:(NotInferred("and_i"))
              multiplier:(NotInferred("multiplier_i"))
              adder:(NotInferred("adder_i"))
              const_value_gen:(NotInferred("const_value_generator_i"))
            }
            Connections{
              Self.NotInferred("l_orderkey") =0=> ExternalOwner(data_src_lineitem).NotInferred("l_orderkey") (connection_23871-23914) 
              ExternalOwner(data_src_lineitem).NotInferred("l_shipmode") =0=> ExternalOwner(data_filter).NotInferred("l_shipmode") (connection_24399-24454) 
              ExternalOwner(data_src_lineitem).NotInferred("l_extendedprice") =0=> ExternalOwner(data_filter).NotInferred("l_extendedprice_in") (connection_24589-24657) 
              ExternalOwner(adder).NotInferred("output") =0=> ExternalOwner(multiplier).NotInferred("input0") (connection_25077-25111) 
              Self.NotInferred("p_partkey") =0=> ExternalOwner(data_src_part).NotInferred("p_partkey") (connection_24006-24043) 
              ExternalOwner(accu).NotInferred("output") =0=> Self.NotInferred("revenue") (connection_25271-25294) 
              ExternalOwner(data_src_lineitem).NotInferred("l_quantity") =0=> ExternalOwner(data_filter).NotInferred("l_quantity") (connection_24293-24348) 
              ExternalOwner(err_and).NotInferred("output") =0=> Self.NotInferred("err") (connection_25562-25599) @NoStrictType
              ExternalOwner(adder).NotInferred("overflow") =0=> ExternalOwner(err_and).NotInferred("input")[NotInferred("2")] (connection_25508-25558) @NoStrictType
              ExternalOwner(data_src_part).NotInferred("p_container") =0=> ExternalOwner(data_filter).NotInferred("p_container") (connection_24236-24289) 
              ExternalOwner(multiplier).NotInferred("output") =0=> ExternalOwner(accu).NotInferred("input") (connection_25235-25267) 
              ExternalOwner(data_filter).NotInferred("l_discount_out") =0=> ExternalOwner(to_neg).NotInferred("input") (connection_24827-24870) 
              ExternalOwner(multiplier).NotInferred("overflow") =0=> ExternalOwner(err_and).NotInferred("input")[NotInferred("0")] (connection_25396-25451) @NoStrictType
              ExternalOwner(data_src_part).NotInferred("p_brand") =0=> ExternalOwner(data_filter).NotInferred("p_brand") (connection_24187-24232) 
              ExternalOwner(accu).NotInferred("overflow") =0=> ExternalOwner(err_and).NotInferred("input")[NotInferred("1")] (connection_25455-25504) @NoStrictType
              ExternalOwner(to_neg).NotInferred("output") =0=> ExternalOwner(adder).NotInferred("input1") (connection_24932-24962) 
              ExternalOwner(data_src_lineitem).NotInferred("l_shipinstruct") =0=> ExternalOwner(data_filter).NotInferred("l_shipinstruct") (connection_24458-24521) 
              Self.NotInferred("p_partkey") =0=> ExternalOwner(data_filter).NotInferred("p_partkey") (connection_24091-24126) 
              ExternalOwner(data_src_lineitem).NotInferred("l_partkey") =0=> ExternalOwner(data_filter).NotInferred("l_partkey") (connection_24130-24183) 
              ExternalOwner(data_src_part).NotInferred("p_size") =0=> ExternalOwner(data_filter).NotInferred("p_size") (connection_24352-24395) 
              ExternalOwner(const_value_gen).NotInferred("output") =0=> ExternalOwner(adder).NotInferred("input0") (connection_24966-25005) 
              ExternalOwner(data_filter).NotInferred("l_extendedprice_out") =0=> ExternalOwner(multiplier).NotInferred("input1") (connection_25115-25168) 
              ExternalOwner(data_src_lineitem).NotInferred("l_discount") =0=> ExternalOwner(data_filter).NotInferred("l_discount_in") (connection_24527-24585) 
              Self.NotInferred("l_linenumber") =0=> ExternalOwner(data_src_lineitem).NotInferred("l_linenumber") (connection_23918-23965) 
            }
          }
          simulation_process{None}
        }
        Implement(part_i)<NormalImplement> -> ProxyStreamlet(part_s<>){
          Scope(implement_part_i){
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(const_value_generator_s<@type_out@value>){
          Scope(implement_const_value_generator_i){
            Variables{
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
              value:int(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(divider_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(divider_s<@data_type>){
          Scope(implement_divider_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_is_larger_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_is_larger_s<@type_in>){
          Scope(implement_comparator_is_larger_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_is_larger_equal_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_is_larger_equal_s<@type_in>){
          Scope(implement_comparator_is_larger_equal_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_is_equal_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_is_equal_s<@type_in>){
          Scope(implement_comparator_is_equal_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(accumulator_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(accumulator_s<@data_type>){
          Scope(implement_accumulator_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(comparator_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_s<@type_in>){
          Scope(implement_comparator_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(converter_i)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(converter_s<@input_type@output_type@channel>){
          Scope(implement_converter_i){
            Variables{
              output_type:DummyLogicalData(NotInferred("$arg$output_type"))
              input_type:DummyLogicalData(NotInferred("$arg$input_type"))
              channel:int(NotInferred("$arg$channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(is_equal_to_const_char10_i)<@string> -> ProxyStreamlet(is_equal_to_const_char10_s<@value>){
          Scope(implement_is_equal_to_const_char10_i){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
            Instances{
              compare:(NotInferred("comparator_is_equal_i"))
              const_gen:(NotInferred("const_char10_generator_i"))
            }
            Connections{
              ExternalOwner(const_gen).NotInferred("output") =0=> ExternalOwner(compare).NotInferred("input0") (connection_10838-10873) 
              ExternalOwner(compare).NotInferred("output") =0=> Self.NotInferred("output") (connection_10905-10945) @NoStrictType
              Self.NotInferred("input") =0=> ExternalOwner(compare).NotInferred("input1") (connection_10877-10901) 
            }
          }
          simulation_process{None}
        }
        Implement(const_char10_generator_i)<@string> -> ProxyStreamlet(const_char10_generator_s<@value>){
          Scope(implement_const_char10_generator_i){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(and_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(and_s<@data_type@input_channel>){
          Scope(implement_and_i){
            Variables{
              input_channel:int(NotInferred("$arg$input_channel"))
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
        Implement(is_equal_to_const_char25_i)<@string> -> ProxyStreamlet(is_equal_to_const_char25_s<@value>){
          Scope(implement_is_equal_to_const_char25_i){
            Variables{
              value:string(NotInferred("$arg$value"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
            Instances{
              const_gen:(NotInferred("const_char25_generator_i"))
              compare:(NotInferred("comparator_is_equal_i"))
            }
            Connections{
              ExternalOwner(const_gen).NotInferred("output") =0=> ExternalOwner(compare).NotInferred("input0") (connection_11314-11349) 
              ExternalOwner(compare).NotInferred("output") =0=> Self.NotInferred("output") (connection_11381-11421) @NoStrictType
              Self.NotInferred("input") =0=> ExternalOwner(compare).NotInferred("input1") (connection_11353-11377) 
            }
          }
          simulation_process{None}
        }
        Implement(padding_zero_i)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(padding_zero_s<@type_in@type_out>){
          Scope(implement_padding_zero_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
            }
            ScopeRelations{
              --ImplementScope-->package_tpch
            }
          }
          simulation_process{None}
        }
      }
    }
  }
}
