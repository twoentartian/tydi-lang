Project(test_project){
  Package(std){
    Scope(package_std){
      Variables{
        max_decimal_15:int(999999999999999)
        month_max:int(12)
        bit_width_decimal_15:int(50)
        $package$std:PackageType(NotInferred(""))
        year_max:int(99999)
        day_max:int(31)
      }
      Types{
        stream_filter_select_stream:Stream(stream_filter_select_stream){
          DataType=Bit(2)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        month_t:Bit(4)
        SQL_decimal_15_2:DataGroup(SQL_decimal_15_2){
          Scope(group_SQL_decimal_15_2){
            Variables{
              frac:UnknownType(NotInferred("2"))
            }
            Types{
              decimal:Bit(50)
            }
            ScopeRelations{
              --GroupScope-->package_std
            }
          }
        }
        year_stream:Stream(year_stream){
          DataType=Bit(17)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        date_stream:Stream(date_stream){
          DataType=DataGroup(Date)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char15:Bit(120)
        SQL_char10_stream:Stream(SQL_char10_stream){
          DataType=Bit(80)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        key_stream:Stream(int_stream){
          DataType=Bit(32)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        day_t:Bit(5)
        varchar_stream:Stream(varchar_stream){
          DataType=Bit(8)
          dimension=2, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char25:Bit(200)
        SQL_char25_stream:Stream(SQL_char25_stream){
          DataType=Bit(200)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_decimal_15_2_stream:Stream(SQL_decimal_15_2_stream){
          DataType=DataGroup(SQL_decimal_15_2)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        day_stream:Stream(day_stream){
          DataType=Bit(5)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        int_stream:Stream(int_stream){
          DataType=Bit(32)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char15_stream:Stream(SQL_char15_stream){
          DataType=Bit(120)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        year_t:Bit(17)
        Date:DataGroup(Date){
          Scope(group_Date){
            Types{
              day:Bit(5)
              month:Bit(4)
              year:Bit(17)
            }
            ScopeRelations{
              --GroupScope-->package_std
            }
          }
        }
        SQL_decimal_15:Bit(50)
        SQL_int:Bit(32)
        month_stream:Stream(month_stream){
          DataType=Bit(4)
          dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char1_stream:Stream(SQL_char1_stream){
          DataType=Bit(8)
          dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
        }
        SQL_char10:Bit(80)
        SQL_char:Bit(8)
      }
      Streamlets{
        Streamlet(supplier_s)<NormalStreamlet>{
          Scope(streamlet_supplier_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              s_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              s_acctbal:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              s_suppkey:Port(Stream(int_stream),in) `DefaultClockDomain
              s_name:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              s_address:Port(Stream(varchar_stream),out) `DefaultClockDomain
              s_phone:Port(Stream(SQL_char15_stream),out) `DefaultClockDomain
              s_nationkey:Port(Stream(int_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(partsupp_s)<NormalStreamlet>{
          Scope(streamlet_partsupp_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              ps_availqty:Port(Stream(int_stream),out) `DefaultClockDomain
              ps_supplycost:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              ps_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              ps_partkey:Port(Stream(int_stream),in) `DefaultClockDomain
              ps_suppkey:Port(Stream(int_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_date_generator_s)<NormalStreamlet>{
          Scope(streamlet_const_date_generator_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              date_output:Port(Stream(date_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s@Stream(SQL_decimal_15_2_stream)@1)<NormalStreamlet>{
          Scope(streamlet_const_value_generator_s@Stream(SQL_decimal_15_2_stream)@1){
            Variables{
              value:int(1)
            }
            Types{
              type_out:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(multiplier_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_multiplier_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              overflow:Port(Stream($generated$Type7686_7700),out) `DefaultClockDomain
              input0:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
              input1:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(sum_qty_s)<NormalStreamlet>{
          Scope(streamlet_sum_qty_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              sum_base_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              error:Port(Stream($generated$Type13832_13846),out) `DefaultClockDomain
              l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              avg_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              sum_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(and_s@Stream(error_stream)@3)<NormalStreamlet>{
          Scope(streamlet_and_s@Stream(error_stream)@3){
            Variables{
              input_channel:int(3)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input@1:Port(Stream(error_stream),in) `DefaultClockDomain
              input@2:Port(Stream(error_stream),in) `DefaultClockDomain
              output:Port(Stream(error_stream),out) `DefaultClockDomain
              input@0:Port(Stream(error_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
              input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(and_s@Stream(error_stream)@2)<NormalStreamlet>{
          Scope(streamlet_and_s@Stream(error_stream)@2){
            Variables{
              input_channel:int(2)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input@1:Port(Stream(error_stream),in) `DefaultClockDomain
              output:Port(Stream(error_stream),out) `DefaultClockDomain
              input@0:Port(Stream(error_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(int_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(int_stream)){
            Types{
              data_type:Stream(int_stream){
                DataType=Bit(32)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
              input:Port(Stream(int_stream),in) `DefaultClockDomain
              output:Port(Stream(int_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s@Stream(year_stream)@1998)<NormalStreamlet>{
          Scope(streamlet_const_value_generator_s@Stream(year_stream)@1998){
            Variables{
              value:int(1998)
            }
            Types{
              type_out:Stream(year_stream){
                DataType=Bit(17)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(Stream(year_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_s@Stream(date_stream))<NormalStreamlet>{
          Scope(streamlet_comparator_s@Stream(date_stream)){
            Types{
              type_in:Stream(date_stream){
                DataType=DataGroup(Date)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input1:Port(Stream(date_stream),in) `DefaultClockDomain
              input0:Port(Stream(date_stream),in) `DefaultClockDomain
              output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(part_s)<NormalStreamlet>{
          Scope(streamlet_part_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              p_type:Port(Stream(varchar_stream),out) `DefaultClockDomain
              p_retailprice:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              p_container:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
              p_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              p_mfgr:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              p_size:Port(Stream(int_stream),out) `DefaultClockDomain
              p_name:Port(Stream(varchar_stream),out) `DefaultClockDomain
              p_partkey:Port(Stream(int_stream),in) `DefaultClockDomain
              p_brand:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(sum_disc_price_s)<NormalStreamlet>{
          Scope(streamlet_sum_disc_price_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              l_tax:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              error:Port(Stream($generated$Type15124_15138),out) `DefaultClockDomain
              sum_disc_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              sum_charge:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(and_s@Stream(error_stream)@4)<NormalStreamlet>{
          Scope(streamlet_and_s@Stream(error_stream)@4){
            Variables{
              input_channel:int(4)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input@0:Port(Stream(error_stream),in) `DefaultClockDomain
              input@1:Port(Stream(error_stream),in) `DefaultClockDomain
              output:Port(Stream(error_stream),out) `DefaultClockDomain
              input@2:Port(Stream(error_stream),in) `DefaultClockDomain
              input@3:Port(Stream(error_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(to_neg_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_to_neg_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_stream_filter_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              select:Port(VarType(stream_filter_select_stream),in) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(varchar_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(varchar_stream)){
            Types{
              data_type:Stream(varchar_stream){
                DataType=Bit(8)
                dimension=2, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:Port(Stream(varchar_stream),in) `DefaultClockDomain
              output:Port(Stream(varchar_stream),out) `DefaultClockDomain
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(divider_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_divider_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              quotient:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              dividend:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              divisor:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(adder_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_adder_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              overflow:Port(Stream($generated$Type7248_7262),out) `DefaultClockDomain
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(padding_zero_s)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_padding_zero_s){
            Variables{
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              stream_in:Port(VarType(type_in),in) `DefaultClockDomain
              stream_out:Port(VarType(type_out),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(multiplier_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_multiplier_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              overflow:Port(Stream($generated$Type7686_7700),out) `DefaultClockDomain
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2)<NormalStreamlet>{
          Scope(streamlet_converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2){
            Variables{
              channel:int(2)
            }
            Types{
              output_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              input_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output@0:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              input@0:Port(Stream(count_type),in) `DefaultClockDomain
              output@1:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              input@1:Port(Stream(count_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_const_value_generator_s){
            Variables{
              value:int(NotInferred("$arg$value"))
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(VarType(type_out),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(converter_s)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_converter_s){
            Variables{
              channel:int(NotInferred("$arg$channel"))
              input_type:DummyLogicalData(NotInferred("$arg$input_type"))
              output_type:DummyLogicalData(NotInferred("$arg$output_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:PortArray[NotInferred("channel")](VarType(input_type),in) `DefaultClockDomain
              output:PortArray[NotInferred("channel")](VarType(output_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1)<NormalStreamlet>{
          Scope(streamlet_converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1){
            Variables{
              channel:int(1)
            }
            Types{
              input_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              output_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output@0:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              input@0:Port(Stream(count_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(divider_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_divider_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              dividend:Port(VarType(data_type),in) `DefaultClockDomain
              divisor:Port(VarType(data_type),in) `DefaultClockDomain
              quotient:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(accumulator_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_accumulator_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            Types{
              count_type:Stream(count_type){
                DataType=Bit(NotInferred("32"))
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              overflow_type:Stream(overflow_type){
                DataType=Bit(NotInferred("1"))
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              overflow:Port(VarType(overflow_type),out) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
              count:Port(VarType(count_type),out) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(and_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_and_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              input_channel:int(NotInferred("$arg$input_channel"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(VarType(data_type),out) `DefaultClockDomain
              input:PortArray[NotInferred("input_channel")](VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(to_neg_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_to_neg_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(comparator_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_comparator_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input0:Port(VarType(type_in),in) `DefaultClockDomain
              output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain
              input1:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(duplicator_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_duplicator_s){
            Variables{
              output_channel:int(NotInferred("$arg$output_channel"))
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:PortArray[NotInferred("output_channel")](VarType(data_type),out) `DefaultClockDomain
              input:Port(VarType(data_type),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(adder_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_adder_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input0:Port(VarType(data_type),in) `DefaultClockDomain
              overflow:Port(Stream($generated$Type7248_7262),out) `DefaultClockDomain
              input1:Port(VarType(data_type),in) `DefaultClockDomain
              output:Port(VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(region_s)<NormalStreamlet>{
          Scope(streamlet_region_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              r_regionkey:Port(Stream(int_stream),in) `DefaultClockDomain
              r_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              r_name:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(sql_date_constructor_s)<NormalStreamlet>{
          Scope(streamlet_sql_date_constructor_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              date_output:Port(Stream(date_stream),out) `DefaultClockDomain
              year_input:Port(Stream(year_stream),in) `DefaultClockDomain
              day_input:Port(Stream(day_stream),in) `DefaultClockDomain
              month_input:Port(Stream(month_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(nation_s)<NormalStreamlet>{
          Scope(streamlet_nation_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              n_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              n_name:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              n_nationkey:Port(Stream(int_stream),in) `DefaultClockDomain
              n_regionkey:Port(Stream(int_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(customer_s)<NormalStreamlet>{
          Scope(streamlet_customer_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              c_acctbal:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              c_address:Port(Stream(varchar_stream),out) `DefaultClockDomain
              c_nationkey:Port(Stream(int_stream),out) `DefaultClockDomain
              c_custkey:Port(Stream(int_stream),in) `DefaultClockDomain
              c_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              c_mktsegment:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
              c_phone:Port(Stream(SQL_char15_stream),out) `DefaultClockDomain
              c_name:Port(Stream(varchar_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(SQL_char1_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(SQL_char1_stream)){
            Types{
              data_type:Stream(SQL_char1_stream){
                DataType=Bit(8)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
              output:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              input:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(orders_s)<NormalStreamlet>{
          Scope(streamlet_orders_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              o_orderdate:Port(Stream(date_stream),out) `DefaultClockDomain
              o_orderkey:Port(Stream(int_stream),in) `DefaultClockDomain
              o_orderstatus:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              o_shippriority:Port(Stream(int_stream),out) `DefaultClockDomain
              o_clerk:Port(Stream(SQL_char15_stream),out) `DefaultClockDomain
              o_custkey:Port(Stream(int_stream),out) `DefaultClockDomain
              o_totalprice:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              o_orderpriority:Port(Stream(SQL_char15_stream),out) `DefaultClockDomain
              o_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(SQL_char10_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(SQL_char10_stream)){
            Types{
              data_type:Stream(SQL_char10_stream){
                DataType=Bit(80)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
              input:Port(Stream(SQL_char10_stream),in) `DefaultClockDomain
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(accumulator_s@Stream(SQL_decimal_15_2_stream))<NormalStreamlet>{
          Scope(streamlet_accumulator_s@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              overflow_type:Stream(overflow_type){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              count_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              count:Port(Stream(count_type),out) `DefaultClockDomain
              overflow:Port(Stream(overflow_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s@Stream(month_stream)@12)<NormalStreamlet>{
          Scope(streamlet_const_value_generator_s@Stream(month_stream)@12){
            Variables{
              value:int(12)
            }
            Types{
              type_out:Stream(month_stream){
                DataType=Bit(4)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(Stream(month_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(const_value_generator_s@Stream(day_stream)@1)<NormalStreamlet>{
          Scope(streamlet_const_value_generator_s@Stream(day_stream)@1){
            Variables{
              value:int(1)
            }
            Types{
              type_out:Stream(day_stream){
                DataType=Bit(5)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              output:Port(Stream(day_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(lineitem_s)<NormalStreamlet>{
          Scope(streamlet_lineitem_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              l_linenumber:Port(Stream(int_stream),in) `DefaultClockDomain
              l_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain
              l_shipinstruct:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              l_orderkey:Port(Stream(int_stream),in) `DefaultClockDomain
              l_returnflag:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              l_partkey:Port(Stream(int_stream),out) `DefaultClockDomain
              l_shipdate:Port(Stream(date_stream),out) `DefaultClockDomain
              l_commitdate:Port(Stream(date_stream),out) `DefaultClockDomain
              l_shipmode:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
              l_tax:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_suppkey:Port(Stream(int_stream),out) `DefaultClockDomain
              l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_linestatus:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              l_receiptdate:Port(Stream(date_stream),out) `DefaultClockDomain
              l_quantity:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_discount:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(void_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_void_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              input:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(SQL_char25_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(SQL_char25_stream)){
            Types{
              data_type:Stream(SQL_char25_stream){
                DataType=Bit(200)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
              output:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              input:Port(Stream(SQL_char25_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(avg_qty_s)<NormalStreamlet>{
          Scope(streamlet_avg_qty_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              count_order:Port(Stream($generated$Type16825_16840),out) `DefaultClockDomain
              avg_disc:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              error:Port(Stream($generated$Type16858_16872),out) `DefaultClockDomain
              l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              avg_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
            }
          }
        }
        Streamlet(stream_filter_s@Stream(date_stream))<NormalStreamlet>{
          Scope(streamlet_stream_filter_s@Stream(date_stream)){
            Types{
              data_type:Stream(date_stream){
                DataType=DataGroup(Date)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain
              input:Port(Stream(date_stream),in) `DefaultClockDomain
              output:Port(Stream(date_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(main_s)<NormalStreamlet>{
          Scope(streamlet_main_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              count_order:Port(Stream($generated$Type18605_18620),out) `DefaultClockDomain
              avg_disc:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              err:Port(Stream($generated$Type18656_18670),out) `DefaultClockDomain
              l_linestatus:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              sum_base_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              sum_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_orderkey:Port(Stream(int_stream),in) `DefaultClockDomain
              sum_charge:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              avg_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_linenumber:Port(Stream(int_stream),in) `DefaultClockDomain
              sum_disc_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_returnflag:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              avg_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(data_filter_s)<NormalStreamlet>{
          Scope(streamlet_data_filter_s){
            ScopeRelations{
              --StreamletScope-->package_std
            }
            Ports{
              l_partkey_out:Port(Stream(int_stream),out) `DefaultClockDomain
              l_shipinstruct_out:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain
              l_shipmode_out:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain
              l_partkey_in:Port(Stream(int_stream),in) `DefaultClockDomain
              l_shipdate_in:Port(Stream(date_stream),in) `DefaultClockDomain
              l_comment_out:Port(Stream(varchar_stream),out) `DefaultClockDomain
              l_shipmode_in:Port(Stream(SQL_char10_stream),in) `DefaultClockDomain
              l_tax_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_commitdate_in:Port(Stream(date_stream),in) `DefaultClockDomain
              l_suppkey_in:Port(Stream(int_stream),in) `DefaultClockDomain
              l_quantity_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_extendedprice_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_comment_in:Port(Stream(varchar_stream),in) `DefaultClockDomain
              l_receiptdate_in:Port(Stream(date_stream),in) `DefaultClockDomain
              l_extendedprice_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_returnflag_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain
              l_shipinstruct_in:Port(Stream(SQL_char25_stream),in) `DefaultClockDomain
              l_receiptdate_out:Port(Stream(date_stream),out) `DefaultClockDomain
              l_commitdate_out:Port(Stream(date_stream),out) `DefaultClockDomain
              l_quantity_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_discount_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_linestatus_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain
              l_suppkey_out:Port(Stream(int_stream),out) `DefaultClockDomain
              l_discount_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain
              l_returnflag_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              l_tax_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain
              l_linestatus_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain
              l_shipdate_out:Port(Stream(date_stream),out) `DefaultClockDomain
            }
          }
        }
      }
      Implements{
        Implement(and_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(and_s<@data_type@input_channel>){
          Scope(implement_and_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              input_channel:int(NotInferred("$arg$input_channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(data_filter_i)<NormalImplement> -> Streamlet(data_filter_s){
          Scope(implement_data_filter_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              l_suppkey_bypass:(Implement(stream_filter_i@Stream(int_stream)))
              l_extendedprice_bypass:(Implement(stream_filter_i@Stream(SQL_decimal_15_2_stream)))
              l_discount_bypass:(Implement(stream_filter_i@Stream(SQL_decimal_15_2_stream)))
              l_shipdate_bypass:(Implement(stream_filter_i@Stream(date_stream)))
              l_shipinstruct_bypass:(Implement(stream_filter_i@Stream(SQL_char25_stream)))
              compare_date:(Implement(comparator_i@Stream(date_stream)))
              l_linestatus_bypass:(Implement(stream_filter_i@Stream(SQL_char1_stream)))
              l_quantity_bypass:(Implement(stream_filter_i@Stream(SQL_decimal_15_2_stream)))
              l_shipmode_bypass:(Implement(stream_filter_i@Stream(SQL_char10_stream)))
              baseline_date:(Implement(const_date_generator_i@1@12@1998))
              l_returnflag_bypass:(Implement(stream_filter_i@Stream(SQL_char1_stream)))
              l_comment_bypass:(Implement(stream_filter_i@Stream(varchar_stream)))
              l_receiptdate_bypass:(Implement(stream_filter_i@Stream(date_stream)))
              l_tax_bypass:(Implement(stream_filter_i@Stream(SQL_decimal_15_2_stream)))
              l_partkey_bypass:(Implement(stream_filter_i@Stream(int_stream)))
              l_commitdate_bypass:(Implement(stream_filter_i@Stream(date_stream)))
            }
            Connections{
              ExternalOwner(l_shipmode_bypass).output:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain =0=> Self.l_shipmode_out:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain (connection_13273-13316) 
              Self.l_returnflag_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_returnflag_bypass).input:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain (connection_11811-11856) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_comment_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_13433-13480) 
              ExternalOwner(l_quantity_bypass).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.l_quantity_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_11017-11060) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_extendedprice_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_11204-11257) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_partkey_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_10539-10586) 
              Self.l_extendedprice_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_extendedprice_bypass).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_11149-11200) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_tax_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_11652-11695) 
              Self.l_linestatus_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_linestatus_bypass).input:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain (connection_12040-12085) 
              ExternalOwner(l_shipdate_bypass).output:Port(Stream(date_stream),out) `DefaultClockDomain =0=> Self.l_shipdate_out:Port(Stream(date_stream),out) `DefaultClockDomain (connection_12359-12402) 
              Self.l_quantity_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_quantity_bypass).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_10920-10961) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_suppkey_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_10744-10791) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_linestatus_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_12089-12139) 
              ExternalOwner(l_tax_bypass).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.l_tax_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_11699-11732) 
              ExternalOwner(l_partkey_bypass).output:Port(Stream(int_stream),out) `DefaultClockDomain =0=> Self.l_partkey_out:Port(Stream(int_stream),out) `DefaultClockDomain (connection_10590-10631) 
              ExternalOwner(l_discount_bypass).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.l_discount_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_11495-11538) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_quantity_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_10965-11013) 
              ExternalOwner(l_linestatus_bypass).output:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> Self.l_linestatus_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain (connection_12143-12190) 
              Self.l_receiptdate_in:Port(Stream(date_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_receiptdate_bypass).input:Port(Stream(date_stream),in) `DefaultClockDomain (connection_12701-12748) 
              Self.l_shipinstruct_in:Port(Stream(SQL_char25_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_shipinstruct_bypass).input:Port(Stream(SQL_char25_stream),in) `DefaultClockDomain (connection_12938-12987) 
              ExternalOwner(l_shipinstruct_bypass).output:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain =0=> Self.l_shipinstruct_out:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain (connection_13047-13098) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_shipmode_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_13221-13269) 
              ExternalOwner(l_comment_bypass).output:Port(Stream(varchar_stream),out) `DefaultClockDomain =0=> Self.l_comment_out:Port(Stream(varchar_stream),out) `DefaultClockDomain (connection_13484-13525) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_returnflag_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_11860-11910) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_discount_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_11443-11491) 
              ExternalOwner(l_extendedprice_bypass).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.l_extendedprice_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_11261-11314) 
              ExternalOwner(l_suppkey_bypass).output:Port(Stream(int_stream),out) `DefaultClockDomain =0=> Self.l_suppkey_out:Port(Stream(int_stream),out) `DefaultClockDomain (connection_10795-10836) 
              Self.l_discount_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_discount_bypass).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_11398-11439) 
              ExternalOwner(baseline_date).date_output:Port(Stream(date_stream),out) `DefaultClockDomain =0=> ExternalOwner(compare_date).input1:Port(Stream(date_stream),in) `DefaultClockDomain (connection_10377-10426) 
              Self.l_tax_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_tax_bypass).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_11617-11648) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_shipdate_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_12307-12355) 
              Self.l_partkey_in:Port(Stream(int_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_partkey_bypass).input:Port(Stream(int_stream),in) `DefaultClockDomain (connection_10496-10535) 
              Self.l_shipdate_in:Port(Stream(date_stream),in) `DefaultClockDomain =0=> ExternalOwner(compare_date).input0:Port(Stream(date_stream),in) `DefaultClockDomain (connection_10336-10373) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_commitdate_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_12525-12575) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_receiptdate_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_12752-12803) 
              ExternalOwner(compare_date).output:Port(Stream($generated$Type5165_5179),out) `DefaultClockDomain =0=> ExternalOwner(l_shipinstruct_bypass).select:Port(Stream(stream_filter_select_stream),in) `DefaultClockDomain (connection_12991-13043) 
              Self.l_shipmode_in:Port(Stream(SQL_char10_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_shipmode_bypass).input:Port(Stream(SQL_char10_stream),in) `DefaultClockDomain (connection_13176-13217) 
              Self.l_comment_in:Port(Stream(varchar_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_comment_bypass).input:Port(Stream(varchar_stream),in) `DefaultClockDomain (connection_13390-13429) 
              ExternalOwner(l_receiptdate_bypass).output:Port(Stream(date_stream),out) `DefaultClockDomain =0=> Self.l_receiptdate_out:Port(Stream(date_stream),out) `DefaultClockDomain (connection_12807-12856) 
              ExternalOwner(l_returnflag_bypass).output:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> Self.l_returnflag_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain (connection_11914-11961) 
              Self.l_commitdate_in:Port(Stream(date_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_commitdate_bypass).input:Port(Stream(date_stream),in) `DefaultClockDomain (connection_12476-12521) 
              Self.l_suppkey_in:Port(Stream(int_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_suppkey_bypass).input:Port(Stream(int_stream),in) `DefaultClockDomain (connection_10701-10740) 
              Self.l_shipdate_in:Port(Stream(date_stream),in) `DefaultClockDomain =0=> ExternalOwner(l_shipdate_bypass).input:Port(Stream(date_stream),in) `DefaultClockDomain (connection_12262-12303) 
              ExternalOwner(l_commitdate_bypass).output:Port(Stream(date_stream),out) `DefaultClockDomain =0=> Self.l_commitdate_out:Port(Stream(date_stream),out) `DefaultClockDomain (connection_12579-12626) 
            }
          }
          simulation_process{None}
        }
        Implement(converter_i)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(converter_s<@input_type@output_type@channel>){
          Scope(implement_converter_i){
            Variables{
              input_type:DummyLogicalData(NotInferred("$arg$input_type"))
              output_type:DummyLogicalData(NotInferred("$arg$output_type"))
              channel:int(NotInferred("$arg$channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(supplier_i)<NormalImplement> -> Streamlet(supplier_s){
          Scope(implement_supplier_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(SQL_char1_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(SQL_char1_stream)){
          Scope(implement_stream_filter_i@Stream(SQL_char1_stream)){
            Types{
              data_type:Stream(SQL_char1_stream){
                DataType=Bit(8)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(and_i@Stream(error_stream)@4)<NormalImplement> -> Streamlet(and_s@Stream(error_stream)@4){
          Scope(implement_and_i@Stream(error_stream)@4){
            Variables{
              input_channel:int(4)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(multiplier_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(multiplier_s<@data_type>){
          Scope(implement_multiplier_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(main_i)<NormalImplement> -> Streamlet(main_s){
          Scope(implement_main_i){
            Types{
              error_stream:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              data_src:(Implement(lineitem_i))
              data_filter:(Implement(data_filter_i))
              part1:(Implement(sum_disc_price_i))
              part0:(Implement(sum_qty_i))
              part2:(Implement(avg_qty_i))
              and:(Implement(and_i@Stream(error_stream)@3))
            }
            Connections{
              ExternalOwner(data_filter).l_linestatus_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> Self.l_linestatus:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain (connection_19679-19724) 
              ExternalOwner(data_src).l_receiptdate:Port(Stream(date_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_receiptdate_in:Port(Stream(date_stream),in) `DefaultClockDomain (connection_19404-19459) 
              ExternalOwner(data_filter).l_quantity_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part0).l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_19771-19818) 
              ExternalOwner(data_filter).l_discount_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part1).l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_20099-20146) 
              ExternalOwner(data_src).l_returnflag:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_returnflag_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain (connection_19180-19233) 
              ExternalOwner(part2).avg_disc:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_disc:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_20443-20470) 
              ExternalOwner(data_src).l_quantity:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_quantity_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_18968-19017) 
              ExternalOwner(part2).error:Port(Stream($generated$Type16858_16872),out) `DefaultClockDomain =0=> ExternalOwner(and).input@2:Port(Stream(error_stream),in) `DefaultClockDomain[2] (connection_20718-20761) @NoStrictType
              ExternalOwner(data_src).l_tax:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_tax_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_19137-19176) 
              ExternalOwner(data_filter).l_quantity_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part2).l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_20312-20359) 
              ExternalOwner(part0).sum_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_19883-19908) 
              ExternalOwner(and).output:Port(Stream(error_stream),out) `DefaultClockDomain =0=> Self.err:Port(Stream($generated$Type18656_18670),out) `DefaultClockDomain (connection_20765-20798) @NoStrictType
              ExternalOwner(part1).sum_disc_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_disc_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_20191-20230) 
              ExternalOwner(part1).sum_charge:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_charge:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_20234-20265) 
              ExternalOwner(part2).count_order:Port(Stream($generated$Type16825_16840),out) `DefaultClockDomain =0=> Self.count_order:Port(Stream($generated$Type18605_18620),out) `DefaultClockDomain (connection_20474-20522) @NoStrictType
              ExternalOwner(data_src).l_suppkey:Port(Stream(int_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_suppkey_in:Port(Stream(int_stream),in) `DefaultClockDomain (connection_18917-18964) 
              ExternalOwner(part0).avg_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_19955-19984) 
              Self.l_linenumber:Port(Stream(int_stream),in) `DefaultClockDomain =0=> ExternalOwner(data_src).l_linenumber:Port(Stream(int_stream),in) `DefaultClockDomain (connection_18782-18820) 
              ExternalOwner(data_filter).l_returnflag_out:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> Self.l_returnflag:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain (connection_19630-19675) 
              ExternalOwner(data_src).l_discount:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_discount_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_19084-19133) 
              ExternalOwner(data_src).l_partkey:Port(Stream(int_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_partkey_in:Port(Stream(int_stream),in) `DefaultClockDomain (connection_18866-18913) 
              ExternalOwner(data_filter).l_extendedprice_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part1).l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_20038-20095) 
              ExternalOwner(data_src).l_commitdate:Port(Stream(date_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_commitdate_in:Port(Stream(date_stream),in) `DefaultClockDomain (connection_19347-19400) 
              ExternalOwner(data_src).l_shipinstruct:Port(Stream(SQL_char25_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_shipinstruct_in:Port(Stream(SQL_char25_stream),in) `DefaultClockDomain (connection_19463-19520) 
              ExternalOwner(part2).avg_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_20414-20439) 
              ExternalOwner(data_filter).l_extendedprice_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part0).l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_19822-19879) 
              Self.l_orderkey:Port(Stream(int_stream),in) `DefaultClockDomain =0=> ExternalOwner(data_src).l_orderkey:Port(Stream(int_stream),in) `DefaultClockDomain (connection_18744-18778) 
              ExternalOwner(data_src).l_comment:Port(Stream(varchar_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_comment_in:Port(Stream(varchar_stream),in) `DefaultClockDomain (connection_19577-19624) 
              ExternalOwner(data_src).l_linestatus:Port(Stream(SQL_char1_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_linestatus_in:Port(Stream(SQL_char1_stream),in) `DefaultClockDomain (connection_19237-19290) 
              ExternalOwner(data_src).l_shipdate:Port(Stream(date_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_shipdate_in:Port(Stream(date_stream),in) `DefaultClockDomain (connection_19294-19343) 
              ExternalOwner(part0).error:Port(Stream($generated$Type13832_13846),out) `DefaultClockDomain =0=> ExternalOwner(and).input@0:Port(Stream(error_stream),in) `DefaultClockDomain[0] (connection_20624-20667) @NoStrictType
              ExternalOwner(data_filter).l_discount_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part2).l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_20363-20410) 
              ExternalOwner(data_src).l_shipmode:Port(Stream(SQL_char10_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_shipmode_in:Port(Stream(SQL_char10_stream),in) `DefaultClockDomain (connection_19524-19573) 
              ExternalOwner(part1).error:Port(Stream($generated$Type15124_15138),out) `DefaultClockDomain =0=> ExternalOwner(and).input@1:Port(Stream(error_stream),in) `DefaultClockDomain[1] (connection_20671-20714) @NoStrictType
              ExternalOwner(data_filter).l_tax_out:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(part1).l_tax:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_20150-20187) 
              ExternalOwner(part0).sum_base_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_base_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_19912-19951) 
              ExternalOwner(data_src).l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(data_filter).l_extendedprice_in:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_19021-19080) 
            }
          }
          simulation_process{None}
        }
        Implement(nation_i)<NormalImplement> -> Streamlet(nation_s){
          Scope(implement_nation_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(SQL_char10_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(SQL_char10_stream)){
          Scope(implement_stream_filter_i@Stream(SQL_char10_stream)){
            Types{
              data_type:Stream(SQL_char10_stream){
                DataType=Bit(80)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(stream_filter_s<@data_type>){
          Scope(implement_stream_filter_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(void_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(void_s<@type_in>){
          Scope(implement_void_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(part_i)<NormalImplement> -> Streamlet(part_s){
          Scope(implement_part_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(region_i)<NormalImplement> -> Streamlet(region_s){
          Scope(implement_region_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(padding_zero_i)<@LogicalDataType(DummyLogicalData)@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(padding_zero_s<@type_in@type_out>){
          Scope(implement_padding_zero_i){
            Variables{
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2)<NormalImplement> -> Streamlet(converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2){
          Scope(implement_converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2){
            Variables{
              channel:int(2)
            }
            Types{
              output_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              input_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(int_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(int_stream)){
          Scope(implement_stream_filter_i@Stream(int_stream)){
            Types{
              data_type:Stream(int_stream){
                DataType=Bit(32)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1)<NormalImplement> -> Streamlet(converter_s@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1){
          Scope(implement_converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1){
            Variables{
              channel:int(1)
            }
            Types{
              output_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              input_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(comparator_i@Stream(date_stream))<NormalImplement> -> Streamlet(comparator_s@Stream(date_stream)){
          Scope(implement_comparator_i@Stream(date_stream)){
            Types{
              type_in:Stream(date_stream){
                DataType=DataGroup(Date)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(customer_i)<NormalImplement> -> Streamlet(customer_s){
          Scope(implement_customer_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i@Stream(month_stream)@12)<NormalImplement> -> Streamlet(const_value_generator_s@Stream(month_stream)@12){
          Scope(implement_const_value_generator_i@Stream(month_stream)@12){
            Variables{
              value:int(12)
            }
            Types{
              type_out:Stream(month_stream){
                DataType=Bit(4)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(and_i@Stream(error_stream)@3)<NormalImplement> -> Streamlet(and_s@Stream(error_stream)@3){
          Scope(implement_and_i@Stream(error_stream)@3){
            Variables{
              input_channel:int(3)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(to_neg_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(to_neg_s<@data_type>){
          Scope(implement_to_neg_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(avg_qty_i)<NormalImplement> -> Streamlet(avg_qty_s){
          Scope(implement_avg_qty_i){
            Types{
              count_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              error_stream:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              accu0:(Implement(accumulator_i@Stream(SQL_decimal_15_2_stream)))
              divider1:(Implement(divider_i@Stream(SQL_decimal_15_2_stream)))
              accu1:(Implement(accumulator_i@Stream(SQL_decimal_15_2_stream)))
              and:(Implement(and_i@Stream(error_stream)@2))
              converter:(Implement(converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@2))
              divider0:(Implement(divider_i@Stream(SQL_decimal_15_2_stream)))
            }
            Connections{
              Self.l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(accu0).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17260-17286) 
              ExternalOwner(divider1).quotient:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_disc:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_17730-17760) 
              ExternalOwner(converter).output@1:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain[1] =0=> ExternalOwner(divider0).divisor:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17366-17406) 
              ExternalOwner(accu0).overflow:Port(Stream(overflow_type),out) `DefaultClockDomain =0=> ExternalOwner(and).input@0:Port(Stream(error_stream),in) `DefaultClockDomain[0] (connection_17862-17908) @NoStrictType
              ExternalOwner(accu1).overflow:Port(Stream(overflow_type),out) `DefaultClockDomain =0=> ExternalOwner(and).input@1:Port(Stream(error_stream),in) `DefaultClockDomain[1] (connection_17912-17958) @NoStrictType
              ExternalOwner(divider0).quotient:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_17410-17439) 
              ExternalOwner(accu0).count:Port(Stream(count_type),out) `DefaultClockDomain =0=> ExternalOwner(converter).input@1:Port(Stream(count_type),in) `DefaultClockDomain[1] (connection_17328-17362) 
              ExternalOwner(accu0).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(divider0).dividend:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17290-17324) 
              Self.l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(accu1).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17445-17471) 
              ExternalOwner(accu1).count:Port(Stream(count_type),out) `DefaultClockDomain =0=> ExternalOwner(converter).input@0:Port(Stream(count_type),in) `DefaultClockDomain[0] (connection_17602-17636) 
              ExternalOwner(and).output:Port(Stream(error_stream),out) `DefaultClockDomain =0=> Self.error:Port(Stream($generated$Type16858_16872),out) `DefaultClockDomain (connection_17962-17997) @NoStrictType
              ExternalOwner(accu1).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(divider1).dividend:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17475-17509) 
              ExternalOwner(converter).output@0:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain[0] =0=> ExternalOwner(divider1).divisor:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_17640-17680) 
              ExternalOwner(accu1).count:Port(Stream(count_type),out) `DefaultClockDomain =0=> Self.count_order:Port(Stream($generated$Type16825_16840),out) `DefaultClockDomain (connection_17684-17726) @NoStrictType
            }
          }
          simulation_process{None}
        }
        Implement(adder_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(adder_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_adder_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(orders_i)<NormalImplement> -> Streamlet(orders_s){
          Scope(implement_orders_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(lineitem_i)<NormalImplement> -> Streamlet(lineitem_s){
          Scope(implement_lineitem_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(comparator_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(comparator_s<@type_in>){
          Scope(implement_comparator_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(duplicator_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(duplicator_s<@data_type@output_channel>){
          Scope(implement_duplicator_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              output_channel:int(NotInferred("$arg$output_channel"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(adder_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(adder_s<@data_type>){
          Scope(implement_adder_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(and_i@Stream(error_stream)@2)<NormalImplement> -> Streamlet(and_s@Stream(error_stream)@2){
          Scope(implement_and_i@Stream(error_stream)@2){
            Variables{
              input_channel:int(2)
            }
            Types{
              data_type:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(multiplier_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(multiplier_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_multiplier_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(to_neg_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(to_neg_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_to_neg_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(divider_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(divider_s<@data_type>){
          Scope(implement_divider_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(const_value_generator_s<@type_out@value>){
          Scope(implement_const_value_generator_i){
            Variables{
              value:int(NotInferred("$arg$value"))
              type_out:DummyLogicalData(NotInferred("$arg$type_out"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(accumulator_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(accumulator_s<@data_type>){
          Scope(implement_accumulator_i){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(partsupp_i)<NormalImplement> -> Streamlet(partsupp_s){
          Scope(implement_partsupp_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(sql_date_constructor_i)<NormalImplement> -> Streamlet(sql_date_constructor_s){
          Scope(implement_sql_date_constructor_i){
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(divider_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(divider_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_divider_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i@Stream(SQL_decimal_15_2_stream)@1)<NormalImplement> -> Streamlet(const_value_generator_s@Stream(SQL_decimal_15_2_stream)@1){
          Scope(implement_const_value_generator_i@Stream(SQL_decimal_15_2_stream)@1){
            Variables{
              value:int(1)
            }
            Types{
              type_out:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_date_generator_i@1@12@1998)<NormalImplement> -> Streamlet(const_date_generator_s){
          Scope(implement_const_date_generator_i@1@12@1998){
            Variables{
              month:int(12)
              day:int(1)
              year:int(1998)
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              compositor:(Implement(sql_date_constructor_i))
              month_gen:(Implement(const_value_generator_i@Stream(month_stream)@12))
              day_gen:(Implement(const_value_generator_i@Stream(day_stream)@1))
              year_gen:(Implement(const_value_generator_i@Stream(year_stream)@1998))
            }
            Connections{
              ExternalOwner(month_gen).output:Port(Stream(month_stream),out) `DefaultClockDomain =0=> ExternalOwner(compositor).month_input:Port(Stream(month_stream),in) `DefaultClockDomain (connection_8858-8901) 
              ExternalOwner(compositor).date_output:Port(Stream(date_stream),out) `DefaultClockDomain =0=> Self.date_output:Port(Stream(date_stream),out) `DefaultClockDomain (connection_8950-8988) 
              ExternalOwner(day_gen).output:Port(Stream(day_stream),out) `DefaultClockDomain =0=> ExternalOwner(compositor).day_input:Port(Stream(day_stream),in) `DefaultClockDomain (connection_8815-8854) 
              ExternalOwner(year_gen).output:Port(Stream(year_stream),out) `DefaultClockDomain =0=> ExternalOwner(compositor).year_input:Port(Stream(year_stream),in) `DefaultClockDomain (connection_8905-8946) 
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_stream_filter_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_date_generator_i)<@int@int@int> -> ProxyStreamlet(const_date_generator_s<>){
          Scope(implement_const_date_generator_i){
            Variables{
              day:int(NotInferred("$arg$day"))
              year:int(NotInferred("$arg$year"))
              month:int(NotInferred("$arg$month"))
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              day_gen:(NotInferred("const_value_generator_i"))
              compositor:(NotInferred("sql_date_constructor_i"))
              month_gen:(NotInferred("const_value_generator_i"))
              year_gen:(NotInferred("const_value_generator_i"))
            }
            Connections{
              ExternalOwner(day_gen).NotInferred("output") =0=> ExternalOwner(compositor).NotInferred("day_input") (connection_8815-8854) 
              ExternalOwner(compositor).NotInferred("date_output") =0=> Self.NotInferred("date_output") (connection_8950-8988) 
              ExternalOwner(month_gen).NotInferred("output") =0=> ExternalOwner(compositor).NotInferred("month_input") (connection_8858-8901) 
              ExternalOwner(year_gen).NotInferred("output") =0=> ExternalOwner(compositor).NotInferred("year_input") (connection_8905-8946) 
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i@Stream(day_stream)@1)<NormalImplement> -> Streamlet(const_value_generator_s@Stream(day_stream)@1){
          Scope(implement_const_value_generator_i@Stream(day_stream)@1){
            Variables{
              value:int(1)
            }
            Types{
              type_out:Stream(day_stream){
                DataType=Bit(5)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(const_value_generator_i@Stream(year_stream)@1998)<NormalImplement> -> Streamlet(const_value_generator_s@Stream(year_stream)@1998){
          Scope(implement_const_value_generator_i@Stream(year_stream)@1998){
            Variables{
              value:int(1998)
            }
            Types{
              type_out:Stream(year_stream){
                DataType=Bit(17)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(SQL_char25_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(SQL_char25_stream)){
          Scope(implement_stream_filter_i@Stream(SQL_char25_stream)){
            Types{
              data_type:Stream(SQL_char25_stream){
                DataType=Bit(200)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(sum_disc_price_i)<NormalImplement> -> Streamlet(sum_disc_price_s){
          Scope(implement_sum_disc_price_i){
            Types{
              error_stream:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              const_decimal_15_value2:(Implement(const_value_generator_i@Stream(SQL_decimal_15_2_stream)@1))
              adder:(Implement(adder_i@Stream(SQL_decimal_15_2_stream)))
              multiplier:(Implement(multiplier_i@Stream(SQL_decimal_15_2_stream)))
              const_decimal_15_value:(Implement(const_value_generator_i@Stream(SQL_decimal_15_2_stream)@1))
              multiplier2:(Implement(multiplier_i@Stream(SQL_decimal_15_2_stream)))
              adder2:(Implement(adder_i@Stream(SQL_decimal_15_2_stream)))
              neg:(Implement(to_neg_i@Stream(SQL_decimal_15_2_stream)))
              and:(Implement(and_i@Stream(error_stream)@4))
            }
            Connections{
              ExternalOwner(neg).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(adder).input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_15517-15544) 
              ExternalOwner(adder2).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(multiplier2).input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_16082-16118) 
              Self.l_discount:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(neg).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_15489-15513) 
              ExternalOwner(adder2).overflow:Port(Stream($generated$Type7248_7262),out) `DefaultClockDomain =0=> ExternalOwner(and).input@2:Port(Stream(error_stream),in) `DefaultClockDomain[2] (connection_16428-16475) @NoStrictType
              Self.l_tax:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(adder2).input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_16003-16026) 
              ExternalOwner(const_decimal_15_value).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(adder).input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_15439-15485) 
              Self.l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(multiplier).input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_15654-15691) 
              ExternalOwner(multiplier2).overflow:Port(Stream($generated$Type7686_7700),out) `DefaultClockDomain =0=> ExternalOwner(and).input@3:Port(Stream(error_stream),in) `DefaultClockDomain[3] (connection_16479-16531) @NoStrictType
              ExternalOwner(multiplier).overflow:Port(Stream($generated$Type7686_7700),out) `DefaultClockDomain =0=> ExternalOwner(and).input@0:Port(Stream(error_stream),in) `DefaultClockDomain[0] (connection_16323-16374) @NoStrictType
              ExternalOwner(multiplier).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(multiplier2).input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_16122-16162) 
              ExternalOwner(multiplier).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_disc_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_15695-15731) 
              ExternalOwner(adder).overflow:Port(Stream($generated$Type7248_7262),out) `DefaultClockDomain =0=> ExternalOwner(and).input@1:Port(Stream(error_stream),in) `DefaultClockDomain[1] (connection_16378-16424) @NoStrictType
              ExternalOwner(adder).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(multiplier).input0:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_15616-15650) 
              ExternalOwner(multiplier2).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_charge:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_16166-16199) 
              ExternalOwner(and).output:Port(Stream(error_stream),out) `DefaultClockDomain =0=> Self.error:Port(Stream($generated$Type15124_15138),out) `DefaultClockDomain (connection_16535-16570) @NoStrictType
              ExternalOwner(const_decimal_15_value2).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(adder2).input1:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_16030-16078) 
            }
          }
          simulation_process{None}
        }
        Implement(accumulator_i@Stream(SQL_decimal_15_2_stream))<NormalImplement> -> Streamlet(accumulator_s@Stream(SQL_decimal_15_2_stream)){
          Scope(implement_accumulator_i@Stream(SQL_decimal_15_2_stream)){
            Types{
              data_type:Stream(SQL_decimal_15_2_stream){
                DataType=DataGroup(SQL_decimal_15_2)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(varchar_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(varchar_stream)){
          Scope(implement_stream_filter_i@Stream(varchar_stream)){
            Types{
              data_type:Stream(varchar_stream){
                DataType=Bit(8)
                dimension=2, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(stream_filter_i@Stream(date_stream))<NormalImplement> -> Streamlet(stream_filter_s@Stream(date_stream)){
          Scope(implement_stream_filter_i@Stream(date_stream)){
            Types{
              data_type:Stream(date_stream){
                DataType=DataGroup(Date)
                dimension=1, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
          }
          simulation_process{None}
        }
        Implement(sum_qty_i)<NormalImplement> -> Streamlet(sum_qty_s){
          Scope(implement_sum_qty_i){
            Types{
              count_type:Stream(count_type){
                DataType=Bit(32)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
              error_stream:Stream(error_stream){
                DataType=Bit(1)
                dimension=0, user=DataNull, throughput=1, synchronicity=Sync, complexity=7, direction=Forward, keep=false
              }
            }
            ScopeRelations{
              --ImplementScope-->package_std
            }
            Instances{
              avg_price_divider:(Implement(divider_i@Stream(SQL_decimal_15_2_stream)))
              accu1:(Implement(accumulator_i@Stream(SQL_decimal_15_2_stream)))
              and:(Implement(and_i@Stream(error_stream)@2))
              accu0:(Implement(accumulator_i@Stream(SQL_decimal_15_2_stream)))
              converter:(Implement(converter_i@Stream(count_type)@Stream(SQL_decimal_15_2_stream)@1))
            }
            Connections{
              ExternalOwner(accu1).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> ExternalOwner(avg_price_divider).dividend:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_14313-14356) 
              ExternalOwner(avg_price_divider).quotient:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.avg_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_14539-14579) 
              Self.l_quantity:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(accu0).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_14109-14135) 
              ExternalOwner(accu0).overflow:Port(Stream(overflow_type),out) `DefaultClockDomain =0=> ExternalOwner(and).input@0:Port(Stream(error_stream),in) `DefaultClockDomain[0] (connection_14681-14727) @NoStrictType
              ExternalOwner(accu1).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_base_price:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_14278-14309) 
              Self.l_extendedprice:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain =0=> ExternalOwner(accu1).input:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_14169-14200) 
              ExternalOwner(accu1).count:Port(Stream(count_type),out) `DefaultClockDomain =0=> ExternalOwner(converter).input@0:Port(Stream(count_type),in) `DefaultClockDomain[0] (connection_14448-14482) 
              ExternalOwner(and).output:Port(Stream(error_stream),out) `DefaultClockDomain =0=> Self.error:Port(Stream($generated$Type13832_13846),out) `DefaultClockDomain (connection_14781-14816) @NoStrictType
              ExternalOwner(accu1).overflow:Port(Stream(overflow_type),out) `DefaultClockDomain =0=> ExternalOwner(and).input@1:Port(Stream(error_stream),in) `DefaultClockDomain[1] (connection_14731-14777) @NoStrictType
              ExternalOwner(accu0).output:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain =0=> Self.sum_qty:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain (connection_14139-14163) 
              ExternalOwner(converter).output@0:Port(Stream(SQL_decimal_15_2_stream),out) `DefaultClockDomain[0] =0=> ExternalOwner(avg_price_divider).divisor:Port(Stream(SQL_decimal_15_2_stream),in) `DefaultClockDomain (connection_14486-14535) 
            }
          }
          simulation_process{None}
        }
      }
    }
  }
}
