Project(test_project){
  Package(main){
    Scope(package_main){
      Variables{
        $package$main:PackageType(NotInferred(""))
        x:UnknownType(NotInferred("4"))
      }
      Types{
        rgb:DataGroup(rgb){
          Scope(group_rgb){
            Variables{
              x:int(8)
            }
            Types{
              b:Bit(8)
              g:Bit(8)
              r:Bit(8)
            }
            ScopeRelations{
              --GroupScope-->streamlet_component@DataGroup(rgb)
            }
            Asserts{
              assert(true)
            }
          }
        }
      }
      Streamlets{
        Streamlet(component)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_component){
            Variables{
              data:DummyLogicalData(NotInferred("$arg$data"))
              x:UnknownType(NotInferred("type data.x"))
            }
            ScopeRelations{
              --StreamletScope-->package_main
            }
            Ports{
              input:Port(Stream($generated$Type322_334),in) `DefaultClockDomain
              output:Port(Stream($generated$Type350_362),out) `DefaultClockDomain
            }
            Asserts{
              assert(NotInferred("x == 8"))
            }
          }
        }
        Streamlet(component@DataGroup(rgb))<NormalStreamlet>{
          Scope(streamlet_component@DataGroup(rgb)){
            Variables{
              x:int(8)
            }
            Types{
              data:DataGroup(rgb){
                Scope(group_rgb){
                  Variables{
                    x:int(8)
                  }
                  Types{
                    b:Bit(8)
                    g:Bit(8)
                    r:Bit(8)
                  }
                  ScopeRelations{
                    --GroupScope-->streamlet_component@DataGroup(rgb)
                  }
                  Asserts{
                    assert(true)
                  }
                }
              }
            }
            ScopeRelations{
              --StreamletScope-->package_main
            }
            Ports{
              output:Port(Stream($generated$Type350_362),out) `DefaultClockDomain
              input:Port(Stream($generated$Type322_334),in) `DefaultClockDomain
            }
            Asserts{
              assert(true)
            }
          }
        }
        Streamlet(duplicator_s)<@LogicalDataType(DummyLogicalData)@int>{
          Scope(streamlet_duplicator_s){
            Variables{
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
              output_channel:int(NotInferred("$arg$output_channel"))
            }
            ScopeRelations{
              --StreamletScope-->package_main
            }
            Ports{
              input:Port(VarType(data_type),in) `DefaultClockDomain
              output:PortArray[NotInferred("output_channel")](VarType(data_type),out) `DefaultClockDomain
            }
          }
        }
        Streamlet(void_s)<@LogicalDataType(DummyLogicalData)>{
          Scope(streamlet_void_s){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --StreamletScope-->package_main
            }
            Ports{
              input:Port(VarType(type_in),in) `DefaultClockDomain
            }
          }
        }
      }
      Implements{
        Implement(component_impl)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(component<@data>){
          Scope(implement_component_impl){
            Variables{
              data:DummyLogicalData(NotInferred("$arg$data"))
              x:UnknownType(NotInferred("streamlet component<type data>.x"))
            }
            ScopeRelations{
              --ImplementScope-->package_main
            }
            Connections{
              Self.NotInferred("input") =0=> Self.NotInferred("output") (connection_717-733) 
            }
            IfBlocks{
              If(NotInferred("true")){
                Scope(if_if_587_660){
                  ScopeRelations{
                    --IfForScope-->implement_component_impl
                  }
                  Asserts{
                    assert(NotInferred("x == 8"))
                  }
                }
                Else{
                  Scope(else_else_628_660){
                    ScopeRelations{
                      --IfForScope-->implement_component_impl
                    }
                    Asserts{
                      assert(NotInferred("x == 7"))
                    }
                  }
                }
              }
            }
            ForBlocks{
              For(NotInferred("i") in NotInferred("(1=1=>2) ")){
                Scope(for_666_711){
                  Variables{
                    i:UnknownType(NotInferred("$arg$i"))
                  }
                  ScopeRelations{
                    --IfForScope-->implement_component_impl
                  }
                  Asserts{
                    assert(NotInferred("x == 8"))
                  }
                }
              }
            }
            Asserts{
              assert(NotInferred("x == 8"))
            }
          }
          simulation_process{None}
        }
        Implement(void_i)<@LogicalDataType(DummyLogicalData)> -> ProxyStreamlet(void_s<@type_in>){
          Scope(implement_void_i){
            Variables{
              type_in:DummyLogicalData(NotInferred("$arg$type_in"))
            }
            ScopeRelations{
              --ImplementScope-->package_main
            }
          }
          simulation_process{None}
        }
        Implement(component_impl@DataGroup(rgb))<NormalImplement> -> Streamlet(component@DataGroup(rgb)){
          Scope(implement_component_impl@DataGroup(rgb)){
            Variables{
              x:UnknownType(NotInferred("streamlet component<type data>.x"))
            }
            Types{
              data:DataGroup(rgb){
                Scope(group_rgb){
                  Variables{
                    x:int(8)
                  }
                  Types{
                    b:Bit(8)
                    g:Bit(8)
                    r:Bit(8)
                  }
                  ScopeRelations{
                    --GroupScope-->streamlet_component@DataGroup(rgb)
                  }
                  Asserts{
                    assert(true)
                  }
                }
              }
            }
            ScopeRelations{
              --ImplementScope-->package_main
            }
            Connections{
              Self.input:Port(Stream($generated$Type322_334),in) `DefaultClockDomain =0=> Self.output:Port(Stream($generated$Type350_362),out) `DefaultClockDomain (connection_717-733) 
            }
            IfBlocks{
              If(true){
                Scope(if_if_587_660){
                  ScopeRelations{
                    --IfForScope-->implement_component_impl@DataGroup(rgb)
                  }
                  Asserts{
                    assert(NotInferred("x == 8"))
                  }
                }
                Else{
                  Scope(else_else_628_660){
                    ScopeRelations{
                      --IfForScope-->implement_component_impl@DataGroup(rgb)
                    }
                    Asserts{
                      assert(NotInferred("x == 7"))
                    }
                  }
                }
              }
            }
            ForBlocks{
              For(NotInferred("i") in NotInferred("(1=1=>2) ")){
                Scope(for_666_711){
                  Variables{
                    i:UnknownType(NotInferred("$arg$i"))
                  }
                  ScopeRelations{
                    --IfForScope-->implement_component_impl@DataGroup(rgb)
                  }
                  Asserts{
                    assert(NotInferred("x == 8"))
                  }
                }
              }
            }
            Asserts{
              assert(NotInferred("x == 8"))
            }
          }
          simulation_process{None}
        }
        Implement(duplicator_i)<@LogicalDataType(DummyLogicalData)@int> -> ProxyStreamlet(duplicator_s<@data_type@output_channel>){
          Scope(implement_duplicator_i){
            Variables{
              output_channel:int(NotInferred("$arg$output_channel"))
              data_type:DummyLogicalData(NotInferred("$arg$data_type"))
            }
            ScopeRelations{
              --ImplementScope-->package_main
            }
          }
          simulation_process{None}
        }
      }
      Instances{
        component_impl0:(NotInferred("component_impl"))
      }
      Asserts{
        assert(NotInferred("type rgb.x == 8"))
        assert(NotInferred("streamlet component<type rgb>.x == 8"))
        assert(NotInferred("x == 4"))
        assert(NotInferred("impl component_impl<type rgb>.x == 8"))
      }
    }
  }
}
